import{_ as i,M as l,p,q as d,R as n,N as e,V as t,t as s,a1 as c}from"./framework-a0a2d26f.js";const r={},u=n("h1",{id:"aiofiles-异步文件接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#aiofiles-异步文件接口","aria-hidden":"true"},"#"),s(" aiofiles - 异步文件接口")],-1),k={class:"no-link"},h={href:"https://pypi.python.org/pypi/aiofiles",target:"_blank",rel:"noopener noreferrer"},_=n("img",{src:"https://img.shields.io/pypi/v/aiofiles.svg",alt:"",loading:"lazy"},null,-1),f={href:"https://travis-ci.org/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},y=n("img",{src:"https://travis-ci.org/Tinche/aiofiles.svg?branch=master",alt:"",loading:"lazy"},null,-1),g={href:"https://codecov.io/gh/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},m=n("img",{src:"https://codecov.io/gh/Tinche/aiofiles/branch/master/graph/badge.svg",alt:"",loading:"lazy"},null,-1),w={href:"https://github.com/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},b=n("img",{src:"https://img.shields.io/pypi/pyversions/aiofiles.svg",alt:"",loading:"lazy"},null,-1),v={class:"table-of-contents"},x=n("h2",{id:"_1-项目简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-项目简介","aria-hidden":"true"},"#"),s(" 1. 项目简介")],-1),T=n("thead",null,[n("tr",null,[n("th",null,"项目"),n("th",null,"信息")])],-1),P=n("td",null,"项目地址",-1),I={href:"https://pypi.python.org/pypi/aiofiles",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},z=n("tr",null,[n("td",null,"开源协议"),n("td",null,"Apache 2")],-1),F=n("tr",null,[n("td",null,"Python 版本"),n("td",null,"Python 3.6 ~ 3.10")],-1),V=n("tr",null,[n("td",null,"标签"),n("td",null,"asyncio")],-1),A=c(`<p><code>aiofiles</code> 是一个 Apache 2 许可的第三方库，用 Python 编写，用于在 <code>asyncio</code> 应用程序中处理本地磁盘文件。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> aiofiles
</code></pre></div><h2 id="_2-特点" tabindex="-1"><a class="header-anchor" href="#_2-特点" aria-hidden="true">#</a> 2. 特点</h2>`,3),C=n("li",null,"非常接机原生 API",-1),E=n("li",null,"支持缓冲区协议和非缓冲区协议的二进制文件",-1),L=n("code",null,"async",-1),q=n("code",null,"await",-1),B={href:"http://www.python.org/dev/peps/pep-0492",target:"_blank",rel:"noopener noreferrer"},D=n("li",null,"支持临时文件",-1),H=c(`<p>普通的本地文件 IO 是阻塞的，不能轻易地、可移植地做成异步的。这意味着做文件 IO 可能会干扰 <code>asyncio</code> 应用程序，它不应该阻塞执行线程。<code>aiofiles</code> 通过引入文件的异步版本，支持将操作委托给一个单独的线程池来帮助解决这个问题。</p><h2 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h2><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;filename&#39;</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    contents <span class="token operator">=</span> <span class="token keyword">await</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>
<span class="token comment"># &#39;My file contents&#39;</span>
</code></pre></div><p>异步迭代也受到支持：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;filename&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><p>异步接口也支持临时文件：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span>tempfile<span class="token punctuation">.</span>TemporaryFile<span class="token punctuation">(</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">await</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;Hello, World!&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>文件是使用 <code>aiofiles.open()</code> 的 coroutine 打开的，它除了兼容内置的 <code>open()</code> 之外，还接受可选的 <code>loop</code> 和 <code>executor</code> 参数。如果没有 <code>loop</code>，将使用默认的 <code>loop</code>，按照设定的 <code>asyncio</code> 策略。如果没有指定 <code>executor</code>，将使用默认的事件循环执行器。</p><p>在成功的情况下，一个异步文件对象被返回，其 API 与普通文件相同，除了以下方法是 Coroutines 并委托给一个执行器。</p><ul><li><code>close()</code></li><li><code>flush()</code></li><li><code>isatty()</code></li><li><code>read()</code></li><li><code>readall()</code></li><li><code>read1()</code></li><li><code>readinto()</code></li><li><code>readline()</code></li><li><code>readlines()</code></li><li><code>seek()</code></li><li><code>seekable()</code></li><li><code>tell()</code></li><li><code>truncate()</code></li><li><code>writable()</code></li><li><code>write()</code></li><li><code>writelines()</code></li></ul><p><code>aiofiles.os</code> 模块包含几个处理文件的有用的 <code>os</code> 函数的执行器启用的 Coroutine 版本。</p><ul><li><code>stat()</code></li><li><code>sendfile()</code></li><li><code>rename()</code></li><li><code>renames()</code></li><li><code>replace()</code></li><li><code>remove()</code></li><li><code>unlink()</code></li><li><code>mkdir()</code></li><li><code>makedirs()</code></li><li><code>rmdir()</code></li><li><code>removedirs()</code></li><li><code>link()</code></li><li><code>symlink()</code></li><li><code>readlink()</code></li><li><code>path.exists()</code></li><li><code>path.isfile()</code></li><li><code>path.isdir()</code></li><li><code>path.islink()</code></li><li><code>path.getsize()</code></li><li><code>path.getatime()</code></li><li><code>path.getctime()</code></li><li><code>path.samefile()</code></li><li><code>path.sameopenfile()</code></li></ul><h2 id="_4-临时文件支持" tabindex="-1"><a class="header-anchor" href="#_4-临时文件支持" aria-hidden="true">#</a> 4. 临时文件支持</h2><p><code>aiofiles.tempfile</code> 实现了下列接口：</p><ul><li><code>TemporaryFile</code></li><li><code>NamedTemporaryFile</code></li><li><code>SpooledTemporaryFile</code></li><li><code>TemporaryDirectory</code></li></ul><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span>tempfile<span class="token punctuation">.</span>NamedTemporaryFile<span class="token punctuation">(</span><span class="token string">&#39;wb+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">await</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b&#39;Line1\\n Line2&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span>tempfile<span class="token punctuation">.</span>TemporaryDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> d<span class="token punctuation">:</span>
    filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">&quot;file.ext&quot;</span><span class="token punctuation">)</span>
</code></pre></div>`,16);function M(O,S){const a=l("ExternalLinkIcon"),o=l("router-link");return p(),d("div",null,[u,n("div",k,[n("p",null,[n("a",h,[_,e(a)]),n("a",f,[y,e(a)]),n("a",g,[m,e(a)]),n("a",w,[b,e(a)])])]),n("nav",v,[n("ul",null,[n("li",null,[e(o,{to:"#_1-项目简介"},{default:t(()=>[s("1. 项目简介")]),_:1})]),n("li",null,[e(o,{to:"#_2-特点"},{default:t(()=>[s("2. 特点")]),_:1})]),n("li",null,[e(o,{to:"#_3-示例"},{default:t(()=>[s("3. 示例")]),_:1})]),n("li",null,[e(o,{to:"#_4-临时文件支持"},{default:t(()=>[s("4. 临时文件支持")]),_:1})])])]),x,n("table",null,[T,n("tbody",null,[n("tr",null,[P,n("td",null,[n("a",I,[s("PyPI"),e(a)]),s(" | "),n("a",N,[s("GitHub"),e(a)])])]),z,F,V])]),A,n("ul",null,[C,E,n("li",null,[s("支持 "),L,s(" / "),q,s("（"),n("a",B,[s("PEP 492"),e(a)]),s("）结构")]),D]),H])}const G=i(r,[["render",M],["__file","aiofiles.html.vue"]]);export{G as default};

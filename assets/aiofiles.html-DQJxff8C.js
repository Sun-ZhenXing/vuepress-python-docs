import{_ as t,r as c,o as p,c as r,b as s,a as l,w as a,d as e,e as i}from"./app-fnnGyvh1.js";const d={},D=s("h1",{id:"aiofiles---异步文件接口",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#aiofiles---异步文件接口","aria-hidden":"true"},"#"),e(" aiofiles - 异步文件接口")],-1),y={class:"no-link"},h={href:"https://pypi.python.org/pypi/aiofiles",target:"_blank",rel:"noopener noreferrer"},u=s("img",{src:"https://img.shields.io/pypi/v/aiofiles.svg",alt:"",loading:"lazy"},null,-1),_=s("br",null,null,-1),f={href:"https://travis-ci.org/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},C=s("img",{src:"https://travis-ci.org/Tinche/aiofiles.svg?branch=master",alt:"",loading:"lazy"},null,-1),g=s("br",null,null,-1),m={href:"https://codecov.io/gh/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},b=s("img",{src:"https://codecov.io/gh/Tinche/aiofiles/branch/master/graph/badge.svg",alt:"",loading:"lazy"},null,-1),k=s("br",null,null,-1),E={href:"https://github.com/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},v=s("img",{src:"https://img.shields.io/pypi/pyversions/aiofiles.svg",alt:"",loading:"lazy"},null,-1),x={class:"table-of-contents"},w=s("h2",{id:"1-项目简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#1-项目简介","aria-hidden":"true"},"#"),e(" 1. 项目简介")],-1),T=s("thead",null,[s("tr",null,[s("th",null,"项目"),s("th",null,"信息")])],-1),A=s("td",null,"项目地址",-1),P={href:"https://pypi.python.org/pypi/aiofiles",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/Tinche/aiofiles",target:"_blank",rel:"noopener noreferrer"},F=s("tr",null,[s("td",null,"开源协议"),s("td",null,"Apache 2")],-1),N=s("tr",null,[s("td",null,"Python 版本"),s("td",null,"Python 3.6 ~ 3.10")],-1),z=s("tr",null,[s("td",null,"标签"),s("td",null,"asyncio")],-1),B=i(`<p><code>aiofiles</code> 是一个 Apache 2 许可的第三方库，用 Python 编写，用于在 <code>asyncio</code> 应用程序中处理本地磁盘文件。</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">aiofiles</span></span>
<span class="line"></span></code></pre></div><h2 id="2-特点" tabindex="-1"><a class="header-anchor" href="#2-特点" aria-hidden="true">#</a> 2. 特点</h2>`,3),L=s("li",null,"非常接机原生 API",-1),V=s("li",null,"支持缓冲区协议和非缓冲区协议的二进制文件",-1),q=s("code",null,"async",-1),H=s("code",null,"await",-1),O={href:"http://www.python.org/dev/peps/pep-0492",target:"_blank",rel:"noopener noreferrer"},S=s("li",null,"支持临时文件",-1),j=i(`<p>普通的本地文件 IO 是阻塞的，不能轻易地、可移植地做成异步的。这意味着做文件 IO 可能会干扰 <code>asyncio</code> 应用程序，它不应该阻塞执行线程。<code>aiofiles</code> 通过引入文件的异步版本，支持将操作委托给一个单独的线程池来帮助解决这个问题。</p><h2 id="3-示例" tabindex="-1"><a class="header-anchor" href="#3-示例" aria-hidden="true">#</a> 3. 示例</h2><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> aiofiles.open(</span><span style="color:#CE9178;">&#39;filename&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;r&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">    contents = </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> f.read()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(contents)</span></span>
<span class="line"><span style="color:#6A9955;"># &#39;My file contents&#39;</span></span>
<span class="line"></span></code></pre></div><p>异步迭代也受到支持：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> aiofiles.open(</span><span style="color:#CE9178;">&#39;filename&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> line </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">        ...</span></span>
<span class="line"></span></code></pre></div><p>异步接口也支持临时文件：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> aiofiles.tempfile.TemporaryFile(</span><span style="color:#CE9178;">&#39;wb&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> f.write(</span><span style="color:#569CD6;">b</span><span style="color:#CE9178;">&#39;Hello, World!&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>文件是使用 <code>aiofiles.open()</code> 的 coroutine 打开的，它除了兼容内置的 <code>open()</code> 之外，还接受可选的 <code>loop</code> 和 <code>executor</code> 参数。如果没有 <code>loop</code>，将使用默认的 <code>loop</code>，按照设定的 <code>asyncio</code> 策略。如果没有指定 <code>executor</code>，将使用默认的事件循环执行器。</p><p>在成功的情况下，一个异步文件对象被返回，其 API 与普通文件相同，除了以下方法是 Coroutines 并委托给一个执行器。</p><ul><li><code>close()</code></li><li><code>flush()</code></li><li><code>isatty()</code></li><li><code>read()</code></li><li><code>readall()</code></li><li><code>read1()</code></li><li><code>readinto()</code></li><li><code>readline()</code></li><li><code>readlines()</code></li><li><code>seek()</code></li><li><code>seekable()</code></li><li><code>tell()</code></li><li><code>truncate()</code></li><li><code>writable()</code></li><li><code>write()</code></li><li><code>writelines()</code></li></ul><p><code>aiofiles.os</code> 模块包含几个处理文件的有用的 <code>os</code> 函数的执行器启用的 Coroutine 版本。</p><ul><li><code>stat()</code></li><li><code>sendfile()</code></li><li><code>rename()</code></li><li><code>renames()</code></li><li><code>replace()</code></li><li><code>remove()</code></li><li><code>unlink()</code></li><li><code>mkdir()</code></li><li><code>makedirs()</code></li><li><code>rmdir()</code></li><li><code>removedirs()</code></li><li><code>link()</code></li><li><code>symlink()</code></li><li><code>readlink()</code></li><li><code>path.exists()</code></li><li><code>path.isfile()</code></li><li><code>path.isdir()</code></li><li><code>path.islink()</code></li><li><code>path.getsize()</code></li><li><code>path.getatime()</code></li><li><code>path.getctime()</code></li><li><code>path.samefile()</code></li><li><code>path.sameopenfile()</code></li></ul><h2 id="4-临时文件支持" tabindex="-1"><a class="header-anchor" href="#4-临时文件支持" aria-hidden="true">#</a> 4. 临时文件支持</h2><p><code>aiofiles.tempfile</code> 实现了下列接口：</p><ul><li><code>TemporaryFile</code></li><li><code>NamedTemporaryFile</code></li><li><code>SpooledTemporaryFile</code></li><li><code>TemporaryDirectory</code></li></ul><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> aiofiles.tempfile.NamedTemporaryFile(</span><span style="color:#CE9178;">&#39;wb+&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> f.write(</span><span style="color:#569CD6;">b</span><span style="color:#CE9178;">&#39;Line1</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;"> Line2&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> f.seek(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> line </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> f:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(line)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> aiofiles.tempfile.TemporaryDirectory() </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> d:</span></span>
<span class="line"><span style="color:#D4D4D4;">    filename = os.path.join(d, </span><span style="color:#CE9178;">&quot;file.ext&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div>`,16);function G(M,W){const o=c("ExternalLinkIcon"),n=c("router-link");return p(),r("div",null,[D,s("div",y,[s("p",null,[s("a",h,[u,l(o)]),_,s("a",f,[C,l(o)]),g,s("a",m,[b,l(o)]),k,s("a",E,[v,l(o)])])]),s("nav",x,[s("ul",null,[s("li",null,[l(n,{to:"#1-项目简介"},{default:a(()=>[e("1. 项目简介")]),_:1})]),s("li",null,[l(n,{to:"#2-特点"},{default:a(()=>[e("2. 特点")]),_:1})]),s("li",null,[l(n,{to:"#3-示例"},{default:a(()=>[e("3. 示例")]),_:1})]),s("li",null,[l(n,{to:"#4-临时文件支持"},{default:a(()=>[e("4. 临时文件支持")]),_:1})])])]),w,s("table",null,[T,s("tbody",null,[s("tr",null,[A,s("td",null,[s("a",P,[e("PyPI"),l(o)]),e(" | "),s("a",I,[e("GitHub"),l(o)])])]),F,N,z])]),B,s("ul",null,[L,V,s("li",null,[e("支持 "),q,e(" / "),H,e("（"),s("a",O,[e("PEP 492"),l(o)]),e("）结构")]),S]),j])}const K=t(d,[["render",G],["__file","aiofiles.html.vue"]]);export{K as default};

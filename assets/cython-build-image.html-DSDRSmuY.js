import{_ as r,r as p,o as D,c as d,b as n,a,w as l,d as s,e as i}from"./app-fnnGyvh1.js";const y={},u=n("h1",{id:"在微服务中使用-cython-安全地构建镜像",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在微服务中使用-cython-安全地构建镜像","aria-hidden":"true"},"#"),s(" 在微服务中使用 Cython 安全地构建镜像")],-1),v={class:"table-of-contents"},m=i(`<h2 id="1-python-部署服务的问题" tabindex="-1"><a class="header-anchor" href="#1-python-部署服务的问题" aria-hidden="true">#</a> 1. Python 部署服务的问题</h2><p>微服务变得越来越流行。我们常常使用如下的 <code>Dockerfile</code> 来构建 Python 服务的镜像：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">FROM</span><span style="color:#D4D4D4;"> python:3.10-slim-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">WORKDIR</span><span style="color:#D4D4D4;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">COPY</span><span style="color:#D4D4D4;"> . ./</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">ENV</span><span style="color:#D4D4D4;"> PYPI_MIRROR_URL=https://pypi.org/simple</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">RUN</span><span style="color:#D4D4D4;"> pip -V \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; python -m pip install -i \${PYPI_MIRROR_URL} --upgrade pip \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; pip config set global.index-url \${PYPI_MIRROR_URL} \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; pip install -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">EXPOSE</span><span style="color:#D4D4D4;"> 8081</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">CMD</span><span style="color:#D4D4D4;"> [ </span><span style="color:#CE9178;">&quot;python&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;server.py&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次我们都从项目中复制源代码，然后安装依赖。对于任何应用，直接使用源代码发布到生产环境不安全，容易在部署中泄漏重要信息。</p><p>而且原始的 Python 代码执行比较低效，需要从头开始解释执行。Python 会在第一次执行项目时，将包内的代码编译为字节码（<code>.pyc</code> 文件），这样可以提高 Python 运行的效率。同样我们也可以直接发布字节码文件，但是我们使用字节码发布同样不安全（字节码可以轻易逆向为源代码）。</p><p>下面我们将介绍 Cython，它可以帮助我们解决这些问题。</p><h2 id="2-使用-cython-构建镜像" tabindex="-1"><a class="header-anchor" href="#2-使用-cython-构建镜像" aria-hidden="true">#</a> 2. 使用 Cython 构建镜像</h2><h3 id="21-cython-简介" tabindex="-1"><a class="header-anchor" href="#21-cython-简介" aria-hidden="true">#</a> 2.1 Cython 简介</h3><p>Cython 通过将 Python 代码翻译为 C/C++ 代码，然后编译为原生的机器码，从而提高了 Python 代码的执行效率，并同时保护了源代码。</p><p>Cython 构建产物为动态链接库（共享库）文件，在 Linux/Unix 系统中为 <code>.so</code> 文件，在 Windows 系统中为 <code>.pyd</code> 文件，其命名为 <code>package_name.python_version-platform_info.so</code>。</p><p>Python 解释器能够识别出这些文件，并可以像标准的 <code>.py</code> 文件或者 <code>.pyc</code> 文件一样加载它们，如 <code>import package_name</code> 是有效的。当这些共享库和包名同名的 Python 文件同时存在时，Python 解释器会优先加载共享库文件。</p><blockquote><p><code>.py</code> 文件和环境相关性最小。而 <code>.pyc</code> 没有平台依赖，但是有 Python 版本依赖，通过 <code>.pyc</code> 能够反射出源代码。共享库文件是原生的机器代码，有平台依赖，同时也有 Python 版本依赖，但是它们不能反射出源代码。</p></blockquote><p>使用 Cython 之前，你需要检查你的项目是否满足要求：</p><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 项目正确配置了 <code>setup.py</code> 文件</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 每个包所在的文件夹存在 <code>__init__.py</code> 文件，否则无法被识别为包，生成的目标文件夹内不生成对应文件</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 计算机中安装了正确的编译器，如 GCC、Clang 或 MSVC 等</label></li></ul><p>首先，我们安装 Cython：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-U</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">cython</span></span>
<span class="line"></span></code></pre></div><h3 id="22-编译示例" tabindex="-1"><a class="header-anchor" href="#22-编译示例" aria-hidden="true">#</a> 2.2 编译示例</h3><p>假设我们有一个后端服务项目结构如下：</p><ul><li><code>resources/</code>：项目用到的资源文件</li><li><code>demo_server/</code><ul><li><code>models/</code><ul><li><code>__init__.py</code></li><li><code>xxx.py</code></li></ul></li><li><code>services/</code><ul><li><code>__init__.py</code></li><li><code>xxx.py</code></li></ul></li><li><code>utils/</code><ul><li><code>__init__.py</code></li><li><code>xxx.py</code></li></ul></li><li><code>__init__.py</code></li><li><code>core.py</code></li></ul></li><li><code>server.py</code>：主入口文件</li><li><code>setup.py</code>：包配置文件</li><li><code>requirements.txt</code>：依赖文件</li></ul><p>首先，我们需要一个 <code>setup.py</code> 文件，用于配置编译选项：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> distutils.core </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> setup</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> Cython.Build </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> cythonize</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">setup(</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;demo_server&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">ext_modules</span><span style="color:#D4D4D4;">=cythonize(</span></span>
<span class="line"><span style="color:#D4D4D4;">        [</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#CE9178;">&quot;server.py&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#CE9178;">&quot;demo_server/**/*.py&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">        ],</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">compiler_directives</span><span style="color:#D4D4D4;">={</span><span style="color:#CE9178;">&quot;language_level&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">},</span></span>
<span class="line"><span style="color:#D4D4D4;">    ),</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处我们指定了 Python 版本为 3，然后指定了 Cython 需要编译的目录和文件。</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">python</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">setup.py</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">build_ext</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-b</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">lib</span></span>
<span class="line"></span></code></pre></div><p><code>-b</code> 选项将指定生成目标文件的路径，此处指定为 <code>lib/</code> 文件夹。</p><p>构建完成后，<code>lib/</code>，文件夹将生成与项目一致的目录结构，但是其中的 <code>.py</code> 文件都被编译为了 <code>.so</code> 或 <code>.pyd</code> 文件。这一过程将生成大量 <code>.c</code> 文件，如果不需要可以删除。</p><h3 id="23-dockerfile-示例" tabindex="-1"><a class="header-anchor" href="#23-dockerfile-示例" aria-hidden="true">#</a> 2.3 Dockerfile 示例</h3><p>现在我们提供一个新的 <code>Dockerfile</code>，用于完成以上构建步骤。注意 Cython 构建时不需要安装其他 <code>requirements.txt</code> 中的依赖。</p><p>我们可以使用 Dockerfile 的多阶段构建来完成这一过程，使用包含标准编译器的镜像构建，然后使用更轻的镜像来发布。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">FROM</span><span style="color:#D4D4D4;"> python:3.10.13-bookworm </span><span style="color:#569CD6;">as</span><span style="color:#D4D4D4;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">WORKDIR</span><span style="color:#D4D4D4;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">ARG</span><span style="color:#D4D4D4;"> PYPI_MIRROR_URL=https://pypi.org/simple</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">COPY</span><span style="color:#D4D4D4;"> . ./</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">RUN</span><span style="color:#D4D4D4;"> pip -V \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; python -m pip install -i \${PYPI_MIRROR_URL} --upgrade pip \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; pip config set global.index-url \${PYPI_MIRROR_URL} \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; pip install Cython \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; python setup.py build_ext -b lib \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; cp -rf requirements.txt lib/ \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; cp -rf resources/ lib/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">FROM</span><span style="color:#D4D4D4;"> python:3.10.13-slim-bookworm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">WORKDIR</span><span style="color:#D4D4D4;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">COPY</span><span style="color:#D4D4D4;"> --from=builder /app/lib /app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">RUN</span><span style="color:#D4D4D4;"> pip -V \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; python -m pip install -i \${PYPI_MIRROR_URL} --upgrade pip \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; pip config set global.index-url \${PYPI_MIRROR_URL} \\</span></span>
<span class="line"><span style="color:#D4D4D4;">    &amp;&amp; pip install -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">EXPOSE</span><span style="color:#D4D4D4;"> 8081</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">CMD</span><span style="color:#D4D4D4;"> [ </span><span style="color:#CE9178;">&quot;python&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;server.py&quot;</span><span style="color:#D4D4D4;"> ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接复制上述 <code>Dockerfile</code>，别忘了加上 <code>.dockerignore</code> 文件，忽略掉各种我们不需要的文件：</p><details class="hint-container details"><summary>dockerignore</summary><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># git</span></span>
<span class="line"><span style="color:#D4D4D4;">.git</span></span>
<span class="line"><span style="color:#D4D4D4;">.gitignore</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Environments</span></span>
<span class="line"><span style="color:#D4D4D4;">.env</span></span>
<span class="line"><span style="color:#D4D4D4;">.venv</span></span>
<span class="line"><span style="color:#D4D4D4;">env/</span></span>
<span class="line"><span style="color:#D4D4D4;">venv/</span></span>
<span class="line"><span style="color:#D4D4D4;">ENV/</span></span>
<span class="line"><span style="color:#D4D4D4;">env.bak/</span></span>
<span class="line"><span style="color:#D4D4D4;">venv.bak/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Byte-compiled / optimized / DLL files</span></span>
<span class="line"><span style="color:#D4D4D4;">__pycache__/</span></span>
<span class="line"><span style="color:#D4D4D4;">*.py[cod]</span></span>
<span class="line"><span style="color:#D4D4D4;">*$py.class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># C extensions</span></span>
<span class="line"><span style="color:#D4D4D4;">*.so</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Distribution / packaging</span></span>
<span class="line"><span style="color:#D4D4D4;">.Python</span></span>
<span class="line"><span style="color:#D4D4D4;">build/</span></span>
<span class="line"><span style="color:#D4D4D4;">develop-eggs/</span></span>
<span class="line"><span style="color:#D4D4D4;">dist/</span></span>
<span class="line"><span style="color:#D4D4D4;">downloads/</span></span>
<span class="line"><span style="color:#D4D4D4;">eggs/</span></span>
<span class="line"><span style="color:#D4D4D4;">.eggs/</span></span>
<span class="line"><span style="color:#D4D4D4;">lib/</span></span>
<span class="line"><span style="color:#D4D4D4;">lib64/</span></span>
<span class="line"><span style="color:#D4D4D4;">parts/</span></span>
<span class="line"><span style="color:#D4D4D4;">sdist/</span></span>
<span class="line"><span style="color:#D4D4D4;">var/</span></span>
<span class="line"><span style="color:#D4D4D4;">wheels/</span></span>
<span class="line"><span style="color:#D4D4D4;">share/python-wheels/</span></span>
<span class="line"><span style="color:#D4D4D4;">*.egg-info/</span></span>
<span class="line"><span style="color:#D4D4D4;">.installed.cfg</span></span>
<span class="line"><span style="color:#D4D4D4;">*.egg</span></span>
<span class="line"><span style="color:#D4D4D4;">MANIFEST</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># PyInstaller</span></span>
<span class="line"><span style="color:#6A9955;">#  Usually these files are written by a python script from a template</span></span>
<span class="line"><span style="color:#6A9955;">#  before PyInstaller builds the exe, so as to inject date/other infos into it.</span></span>
<span class="line"><span style="color:#D4D4D4;">*.manifest</span></span>
<span class="line"><span style="color:#D4D4D4;">*.spec</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Installer logs</span></span>
<span class="line"><span style="color:#D4D4D4;">pip-log.txt</span></span>
<span class="line"><span style="color:#D4D4D4;">pip-delete-this-directory.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="3-动态导入和路由发现" tabindex="-1"><a class="header-anchor" href="#3-动态导入和路由发现" aria-hidden="true">#</a> 3. 动态导入和路由发现</h2>`,32),b=n("code",null,"importlib",-1),C=n("p",null,[s("我们在构建网络服务时常常使用一些元编程技巧，这常常需要借助运行时反射来实现。如 SpringBoot 中的 "),n("code",null,"@ComponentScan"),s(" 能够自动扫描并加载所有的 "),n("code",null,"@Component"),s(" 注解的类，然后将它们注册到 IoC 容器中。")],-1),h=n("p",null,"通常静态构建后会损失一些元信息，如果有特定模块或库依赖这些元信息运行则会导致一些问题。",-1),_={href:"https://sanic.dev/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://sanic.dev/en/guide/how-to/autodiscovery.html",target:"_blank",rel:"noopener noreferrer"},E=i(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> glob </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> glob</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> importlib </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> util</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> inspect </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> getmembers</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> types </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> ModuleType</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> sanic </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Sanic</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> sanic.blueprints </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Blueprint</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> sanic.log </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> logger</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">autodiscover</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">: Sanic, </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">) -&gt; set[Blueprint]:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;&quot;&quot;自动路由发现，在 App 上自动注册 \`Blueprint\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CE9178;">    Referece: &lt;https://sanic.dev/en/guide/how-to/autodiscovery.html&gt;</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    blueprint_set: set[Blueprint] = </span><span style="color:#4EC9B0;">set</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    imported_set: set[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">] = </span><span style="color:#4EC9B0;">set</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">_find_bps</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">module</span><span style="color:#D4D4D4;">: ModuleType):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">nonlocal</span><span style="color:#D4D4D4;"> blueprint_set</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> _, member </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> getmembers(module):</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">isinstance</span><span style="color:#D4D4D4;">(member, Blueprint):</span></span>
<span class="line"><span style="color:#D4D4D4;">                blueprint_set.add(member)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    path = path.removesuffix(</span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">).removesuffix(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\\\</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> path </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> glob(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">path</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">/**/*.py&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">recursive</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;__pycache__&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> path:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> path </span><span style="color:#569CD6;">not</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> imported_set:</span></span>
<span class="line"><span style="color:#D4D4D4;">            path = os.path.normpath(path).replace(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\\\</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            name = </span><span style="color:#CE9178;">&quot;&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;__init__&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> path:</span></span>
<span class="line"><span style="color:#D4D4D4;">                name = path.split(</span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">)[-</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                name = path.split(</span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">)[-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">                name = name.split(</span><span style="color:#CE9178;">&quot;.&quot;</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">            spec = util.spec_from_file_location(name, path)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> spec </span><span style="color:#569CD6;">is</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">or</span><span style="color:#D4D4D4;"> spec.loader </span><span style="color:#569CD6;">is</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">            specmod = util.module_from_spec(spec)</span></span>
<span class="line"><span style="color:#D4D4D4;">            imported_set.add(path)</span></span>
<span class="line"><span style="color:#D4D4D4;">            spec.loader.exec_module(specmod)</span></span>
<span class="line"><span style="color:#D4D4D4;">            _find_bps(specmod)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> bp </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> blueprint_set:</span></span>
<span class="line"><span style="color:#D4D4D4;">        app.blueprint(bp)</span></span>
<span class="line"><span style="color:#D4D4D4;">        logger.info(</span><span style="color:#CE9178;">&quot;Auto discover Blueprint: </span><span style="color:#569CD6;">{!r}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">.format(bp))</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> blueprint_set</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码在源代码模式下运行良好，但是编译为链接库后无法运行，因为 <code>importlib.util.spec_from_file_location()</code> 无法识别链接库中的文件。</p><p><code>spec_from_file_location()</code> 有一个参数 <code>loader</code>，如果没有传入，默认情况下将使用 <code>importlib.machinery.SourceFileLoader</code>，它只能加载源代码文件。我们可以自定义一个 <code>loader</code>，用于加载链接库中的文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> os</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> glob </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> iglob</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> importlib </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> machinery, util</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> inspect </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> getmembers</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> itertools </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> chain</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> types </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> ModuleType</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> sanic </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Sanic</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> sanic.blueprints </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Blueprint</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> sanic.log </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> logger</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">autodiscover</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">: Sanic, </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">) -&gt; set[Blueprint]:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;&quot;&quot;自动路由发现，在 App 上自动注册 \`Blueprint\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CE9178;">    Referece: &lt;https://sanic.dev/en/guide/how-to/autodiscovery.html&gt;</span></span>
<span class="line"><span style="color:#CE9178;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    blueprint_set: set[Blueprint] = </span><span style="color:#4EC9B0;">set</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    imported_set: set[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">] = </span><span style="color:#4EC9B0;">set</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">_find_bps</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">module</span><span style="color:#D4D4D4;">: ModuleType):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">nonlocal</span><span style="color:#D4D4D4;"> blueprint_set</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> _, member </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> getmembers(module):</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">isinstance</span><span style="color:#D4D4D4;">(member, Blueprint):</span></span>
<span class="line"><span style="color:#D4D4D4;">                blueprint_set.add(member)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    path = path.removesuffix(</span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">).removesuffix(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\\\</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> path </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> chain(</span></span>
<span class="line"><span style="color:#D4D4D4;">        *(</span></span>
<span class="line"><span style="color:#D4D4D4;">            iglob(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">path</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">/**/*.</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">ext</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">recursive</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> ext </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> (</span><span style="color:#CE9178;">&quot;py&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;pyc&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;pyo&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;pyd&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;so&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;dylib&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        )</span></span>
<span class="line"><span style="color:#D4D4D4;">    ):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;__pycache__&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> path:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> path </span><span style="color:#569CD6;">not</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> imported_set:</span></span>
<span class="line"><span style="color:#D4D4D4;">            path = os.path.normpath(path).replace(</span><span style="color:#CE9178;">&quot;</span><span style="color:#D7BA7D;">\\\\</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            name = </span><span style="color:#CE9178;">&quot;&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;__init__&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> path:</span></span>
<span class="line"><span style="color:#D4D4D4;">                name = path.split(</span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">)[-</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                name = path.split(</span><span style="color:#CE9178;">&quot;/&quot;</span><span style="color:#D4D4D4;">)[-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">                name = name.split(</span><span style="color:#CE9178;">&quot;.&quot;</span><span style="color:#D4D4D4;">)[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">            loader = </span><span style="color:#569CD6;">None</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> path.endswith(</span><span style="color:#CE9178;">&quot;.so&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">or</span><span style="color:#D4D4D4;"> path.endswith(</span><span style="color:#CE9178;">&quot;.dylib&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">or</span><span style="color:#D4D4D4;"> path.endswith(</span><span style="color:#CE9178;">&quot;.pyd&quot;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">                loader = machinery.ExtensionFileLoader(name, path)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">elif</span><span style="color:#D4D4D4;"> path.endswith(</span><span style="color:#CE9178;">&quot;.pyc&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">or</span><span style="color:#D4D4D4;"> path.endswith(</span><span style="color:#CE9178;">&quot;.pyo&quot;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">                loader = machinery.SourcelessFileLoader(name, path)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">elif</span><span style="color:#D4D4D4;"> path.endswith(</span><span style="color:#CE9178;">&quot;.py&quot;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">                loader = machinery.SourceFileLoader(name, path)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> loader </span><span style="color:#569CD6;">is</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">            spec = util.spec_from_file_location(name, path, </span><span style="color:#9CDCFE;">loader</span><span style="color:#D4D4D4;">=loader)</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> spec </span><span style="color:#569CD6;">is</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">or</span><span style="color:#D4D4D4;"> spec.loader </span><span style="color:#569CD6;">is</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">            specmod = util.module_from_spec(spec)</span></span>
<span class="line"><span style="color:#D4D4D4;">            imported_set.add(path)</span></span>
<span class="line"><span style="color:#D4D4D4;">            spec.loader.exec_module(specmod)</span></span>
<span class="line"><span style="color:#D4D4D4;">            _find_bps(specmod)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> bp </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> blueprint_set:</span></span>
<span class="line"><span style="color:#D4D4D4;">        app.blueprint(bp)</span></span>
<span class="line"><span style="color:#D4D4D4;">        logger.info(</span><span style="color:#CE9178;">&quot;Auto discover Blueprint: </span><span style="color:#569CD6;">{!r}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">.format(bp))</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> blueprint_set</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function q(g,k){const e=p("router-link"),c=p("RouterLink"),o=p("ExternalLinkIcon"),t=p("Badge");return D(),d("div",null,[u,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#1-python-部署服务的问题"},{default:l(()=>[s("1. Python 部署服务的问题")]),_:1})]),n("li",null,[a(e,{to:"#2-使用-cython-构建镜像"},{default:l(()=>[s("2. 使用 Cython 构建镜像")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#21-cython-简介"},{default:l(()=>[s("2.1 Cython 简介")]),_:1})]),n("li",null,[a(e,{to:"#22-编译示例"},{default:l(()=>[s("2.2 编译示例")]),_:1})]),n("li",null,[a(e,{to:"#23-dockerfile-示例"},{default:l(()=>[s("2.3 Dockerfile 示例")]),_:1})])])]),n("li",null,[a(e,{to:"#3-动态导入和路由发现"},{default:l(()=>[s("3. 动态导入和路由发现")]),_:1})])])]),m,n("p",null,[s("以下内容需要对 Python 的 "),b,s(" 模块有一定的了解，如果你不了解如何动态导入模块，可以参考 "),a(c,{to:"/basic/collections/import-python-file-from-path.html"},{default:l(()=>[s("此文章")]),_:1}),s("。")]),C,h,n("p",null,[s("在 Python 中，我们常常使用自定义装饰器来完成相应的功能。例如，在 "),n("a",_,[s("Sanic"),a(o)]),s(" 中我们可以使用 "),n("a",f,[s("自动路由发现"),a(o)]),s(" 来自动注册路由，从而无需编写引入代码。")]),E,n("p",null,[s("现在它可以在各种环境下正确地注册路由了，如果你对此感兴趣，可以查看 "),a(t,{type:"danger"},{default:l(()=>[s("TODO")]),_:1}),s(" 示例项目 了解更多。")])])}const R=r(y,[["render",q],["__file","cython-build-image.html.vue"]]);export{R as default};

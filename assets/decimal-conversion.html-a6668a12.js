import{_ as p,M as o,p as c,q as l,R as n,N as e,V as t,t as s,a1 as i}from"./framework-5f7e94ef.js";const r={},u=n("h1",{id:"进制转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#进制转换","aria-hidden":"true"},"#"),s(" 进制转换")],-1),k={class:"table-of-contents"},d=i(`<h2 id="_1-字符串转换" tabindex="-1"><a class="header-anchor" href="#_1-字符串转换" aria-hidden="true">#</a> 1. 字符串转换</h2><div class="language-python" data-ext="py"><pre class="language-python"><code>
</code></pre></div><h2 id="_2-数组表示的任意进制" tabindex="-1"><a class="header-anchor" href="#_2-数组表示的任意进制" aria-hidden="true">#</a> 2. 数组表示的任意进制</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">convert_base</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> base <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>
            <span class="token string">&#39;&quot;number&quot; must be positive and &quot;base&quot; must be greater than 1&#39;</span>
        <span class="token punctuation">)</span>
    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> base <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>number<span class="token punctuation">]</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        number<span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> base<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res

<span class="token keyword">def</span> <span class="token function">from_list</span><span class="token punctuation">(</span>l<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> base<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> base <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;&quot;base&quot; must be greater than 1&#39;</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> l<span class="token punctuation">:</span>
        res <span class="token operator">=</span> res <span class="token operator">*</span> base <span class="token operator">+</span> x
    <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function b(m,v){const a=o("router-link");return c(),l("div",null,[u,n("nav",k,[n("ul",null,[n("li",null,[e(a,{to:"#_1-字符串转换"},{default:t(()=>[s("1. 字符串转换")]),_:1})]),n("li",null,[e(a,{to:"#_2-数组表示的任意进制"},{default:t(()=>[s("2. 数组表示的任意进制")]),_:1})])])]),d])}const _=p(r,[["render",b],["__file","decimal-conversion.html.vue"]]);export{_ as default};

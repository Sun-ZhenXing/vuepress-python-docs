import{_ as i,r as t,o as p,c as r,b as l,a as n,w as o,d as e,e as c}from"./app-3e031038.js";const u={},h=l("h1",{id:"glob-unix-风格路径名模式扩展",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#glob-unix-风格路径名模式扩展","aria-hidden":"true"},"#"),e(" glob - Unix 风格路径名模式扩展")],-1),_={class:"table-of-contents"},b=l("h2",{id:"_1-glob-模块简介",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#_1-glob-模块简介","aria-hidden":"true"},"#"),e(" 1. glob 模块简介")],-1),g=l("thead",null,[l("tr",null,[l("th",null,"项目"),l("th",null,"信息")])],-1),D=l("td",null,"源代码",-1),y={href:"https://github.com/python/cpython/tree/3.11/Lib/glob.py",target:"_blank",rel:"noopener noreferrer"},f=l("tr",null,[l("td",null,"Python 版本"),l("td",null,"全版本")],-1),v=l("tr",null,[l("td",null,"标签"),l("td",null,"文件和目录")],-1),m=c('<p><code>glob</code> 模块可根据 Unix 终端所用规则找出所有匹配特定模式的路径名，但会按不确定的顺序返回结果。</p><ul><li>波浪号 <code>~</code> 扩展不会生效</li><li>但 <code>*</code>、<code>?</code> 以及表示为 <code>[]</code> 的字符范围将被正确地匹配</li></ul><div class="hint-container info"><p class="hint-container-title">glob 实现</p><p>这是通过配合使用 <code>os.scandir()</code> 和 <code>fnmatch.fnmatch()</code> 函数来实现的，而不是通过实际发起调用子终端。请注意不同于 <code>fnmatch.fnmatch()</code>，<code>glob</code> 会将以点号 <code>&quot;.&quot;</code> 开头的文件名作为特殊情况来处理。对于波浪号和终端变量扩展，请使用 <code>os.path.expanduser()</code> 和 <code>os.path.expandvars()</code>。</p></div><h2 id="_2-库函数" tabindex="-1"><a class="header-anchor" href="#_2-库函数" aria-hidden="true">#</a> 2. 库函数</h2><table><thead><tr><th>函数</th></tr></thead><tbody><tr><td><code>glob.glob(pathname, *, root_dir=None, dir_fd=None, recursive=False)</code></td></tr></tbody></table><p>返回匹配 <code>pathname</code> 的可能为空的路径名列表，请注意路径的任何开头部分都将被保留。</p><p>如果 <code>recursive</code> 为真值，则模式 <code>&quot;**&quot;</code> 将匹配目录中的任何文件以及零个或多个目录、子目录和符号链接。</p>',7),x=l("code",null,'"**"',-1),C=l("code",null,"glob",-1),E=l("code",null,"root_dir",-1),k=l("code",null,"dir_fd",-1),N=l("code",null,"include_hidden",-1),A=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"函数")])]),l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"glob.iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False)")])])])],-1),q=l("p",null,[e("返回一个 "),l("code",null,"iterator"),e("，它会产生与 "),l("code",null,"glob()"),e(" 相同的结果，但不会实际地同时保存它们。")],-1),B=l("tbody",null,[l("tr",null,[l("td",null,[l("code",null,"glob.escape(pathname)")])])],-1),F=c(`<p>转义所有特殊字符（<code>&#39;?&#39;</code>, <code>&#39;*&#39;</code> 和 <code>&#39;[&#39;</code>）。</p><p>这适用于当你想要匹配可能带有特殊字符的任意字符串字面值的情况。在 <code>drive/UNC</code> 共享点中的特殊字符不会被转义，例如在 Windows 上 <code>escape(&#39;//?/c:/Quo vadis?.txt&#39;)</code> 将返回 <code>&#39;//?/c:/Quo vadis[?].txt&#39;</code>。</p><h2 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例" aria-hidden="true">#</a> 3. 示例</h2><h3 id="_3-1-匹配文件名" tabindex="-1"><a class="header-anchor" href="#_3-1-匹配文件名" aria-hidden="true">#</a> 3.1 匹配文件名</h3><p>考虑一个包含以下内容的目录：</p><ul><li><code>1.gif</code></li><li><code>2.txt</code></li><li><code>card.gif</code></li><li><code>sub/</code><ul><li><code>3.txt</code></li></ul></li></ul><p><code>glob()</code> 将产生如下结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> glob</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">glob.glob(</span><span style="color:#CE9178;">&#39;./[0-9].*&#39;</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;"># [&#39;./1.gif&#39;, &#39;./2.txt&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">glob.glob(</span><span style="color:#CE9178;">&#39;*.gif&#39;</span><span style="color:#D4D4D4;">)      </span><span style="color:#6A9955;"># [&#39;1.gif&#39;, &#39;card.gif&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">glob.glob(</span><span style="color:#CE9178;">&#39;?.gif&#39;</span><span style="color:#D4D4D4;">)      </span><span style="color:#6A9955;"># [&#39;1.gif&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">glob.glob(</span><span style="color:#CE9178;">&#39;**/*.txt&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">recursive</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)   </span><span style="color:#6A9955;"># [&#39;2.txt&#39;, &#39;sub/3.txt&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">glob.glob(</span><span style="color:#CE9178;">&#39;./**/&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">recursive</span><span style="color:#D4D4D4;">=</span><span style="color:#569CD6;">True</span><span style="color:#D4D4D4;">)      </span><span style="color:#6A9955;"># [&#39;./&#39;, &#39;./sub/&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-匹配点-开头的文件" tabindex="-1"><a class="header-anchor" href="#_3-2-匹配点-开头的文件" aria-hidden="true">#</a> 3.2 匹配点（.）开头的文件</h3><p>如果目录包含以 <code>&quot;.&quot;</code> 打头的文件，它们默认将不会被匹配。</p><p>例如，考虑一个包含 <code>card.gif</code> 和 <code>.card.gif</code> 的目录：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">glob.glob(</span><span style="color:#CE9178;">&#39;*.gif&#39;</span><span style="color:#D4D4D4;">)  </span><span style="color:#6A9955;"># [&#39;card.gif&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">glob.glob(</span><span style="color:#CE9178;">&#39;.c*&#39;</span><span style="color:#D4D4D4;">)    </span><span style="color:#6A9955;"># [&#39;.card.gif&#39;]</span></span>
<span class="line"></span></code></pre></div>`,12);function L(V,w){const s=t("router-link"),d=t("ExternalLinkIcon"),a=t("Badge");return p(),r("div",null,[h,l("nav",_,[l("ul",null,[l("li",null,[n(s,{to:"#_1-glob-模块简介"},{default:o(()=>[e("1. glob 模块简介")]),_:1})]),l("li",null,[n(s,{to:"#_2-库函数"},{default:o(()=>[e("2. 库函数")]),_:1})]),l("li",null,[n(s,{to:"#_3-示例"},{default:o(()=>[e("3. 示例")]),_:1}),l("ul",null,[l("li",null,[n(s,{to:"#_3-1-匹配文件名"},{default:o(()=>[e("3.1 匹配文件名")]),_:1})]),l("li",null,[n(s,{to:"#_3-2-匹配点-开头的文件"},{default:o(()=>[e("3.2 匹配点（.）开头的文件")]),_:1})])])])])]),b,l("table",null,[g,l("tbody",null,[l("tr",null,[D,l("td",null,[l("a",y,[e("Lib/glob.py"),n(d)])])]),f,v])]),m,l("p",null,[n(a,{type:"tip"},{default:o(()=>[e("3.5+")]),_:1}),e(" 支持使用 "),x,e(" 的递归 "),C,e("。")]),l("p",null,[n(a,{type:"tip"},{default:o(()=>[e("3.10+")]),_:1}),e(" 添加了 "),E,e(" 和 "),k,e(" 形参。")]),l("p",null,[n(a,{type:"tip"},{default:o(()=>[e("3.11+")]),_:1}),e(" 添加 "),N,e(" 形参。")]),A,q,l("table",null,[l("thead",null,[l("tr",null,[l("th",null,[e("函数 "),n(a,{type:"tip"},{default:o(()=>[e("3.4+")]),_:1})])])]),B]),F])}const U=i(u,[["render",L],["__file","glob.html.vue"]]);export{U as default};

import{_ as t,r as e,o as r,c as i,b as s,a,w as l,d as n,e as o}from"./app-25f9176f.js";const y={},d=s("h1",{id:"python-泛型编程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-泛型编程","aria-hidden":"true"},"#"),n(" Python 泛型编程")],-1),C=s("p",null,"Python 是多范式的编程语言，支持泛型编程。本文介绍使用 Python 泛型编程的一些细节和实现。",-1),u={class:"table-of-contents"},v=o(`<h2 id="_1-类型注解" tabindex="-1"><a class="header-anchor" href="#_1-类型注解" aria-hidden="true">#</a> 1. 类型注解</h2><h3 id="_1-1-类型注解的作用" tabindex="-1"><a class="header-anchor" href="#_1-1-类型注解的作用" aria-hidden="true">#</a> 1.1 类型注解的作用</h3><p>为什么使用类型注解？</p><ol><li>提高工作效率，可以帮助 IDE 完成自动类型推断</li><li>提高代码的可读性和可重用性</li><li>减少不确定性的错误和预期外的结果</li></ol><p>Python 的泛型编程和 C++/Java 的泛型编程有什么区别和共同点？</p><ol><li>共同点：都可以实现代码复用</li><li>不同点：Python 的泛型不是强制的，可以不遵循类型声明，可以使用任意的类型代替</li></ol><p>Python 使用 <code>typing</code> 模块实现类型注解，相对来讲，Python 的类型注解更加接近于 TypeScript 而不是传统的编译型语言。</p><p>类型注解用于标注、解释你的参数、返回值或容器内元素的类型。如果你想使用 Python 的泛型编程，必须了解类型注解。</p><p>虽然 Python 是动态类型的语言，但写程序时养成良好的习惯，会大大提高你的编码效率，减少错误出现，正如 <em>Zen of Python</em> 所说</p><blockquote><p>Explicit is better than implicit.（显式胜于隐式）</p><p><cite>——Tim Peters</cite></p></blockquote><p>通俗一点来讲就是，如果你的函数返回类型是可知的，就不要把它藏起来，让别人猜测你的返回类型。</p><p>一个优雅的方式是，一个标识符只绑定到一种特定的类。</p><p>有时候，一个功能需要写很多注释来说明这些参数和返回值是什么含义，但是这些注释对于用户和代码的调用者都是不可见的。所以我们使用文档字符串来描述函数或类的核心功能。</p><h3 id="_1-2-对内置容器使用泛型" tabindex="-1"><a class="header-anchor" href="#_1-2-对内置容器使用泛型" aria-hidden="true">#</a> 1.2 对内置容器使用泛型</h3><p>Python 的泛型编程不完全为代码复用而生，更像是为代码易用、代码规范而生。</p><p>内置的容器都支持泛型，写法如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 形如 (1.23, 4.56, 7.89) 的元组类型，只包含浮点数</span></span>
<span class="line"><span style="color:#D4D4D4;">t0 = tuple[</span><span style="color:#4EC9B0;">float</span><span style="color:#D4D4D4;">]()</span></span>
<span class="line"><span style="color:#6A9955;"># 也可以这样注解</span></span>
<span class="line"><span style="color:#D4D4D4;">t0: tuple[</span><span style="color:#4EC9B0;">float</span><span style="color:#D4D4D4;">] = ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 结构为 (str, int) 型的元组</span></span>
<span class="line"><span style="color:#D4D4D4;">t1 = tuple[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">]()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 从字符串映射到列表的字典类型，列表的元素是整型的</span></span>
<span class="line"><span style="color:#D4D4D4;">d0 = dict[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, list[</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">]]()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 包含字符串元组的列表</span></span>
<span class="line"><span style="color:#D4D4D4;">l0 = list[tuple[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">]]()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在 IDE 中编写程序，调用这些变量的方法时，会有大量的类型推断或智能提示。IDE 也会在你不使用注解时尽可能多地推理出变量的类型，并在你可能出错的地方给予警告。</p><div class="hint-container warning"><p class="hint-container-title">非强制类型</p><p>与 TypeScript 不同的是，Python 的类型注解不是强制的，你不必保证在 <code>d0</code> 中的每个元素都是 <code>float</code> 类型的。</p><p>但是，既然我们是这么写的，我们应该保证程序在运行时，<code>t0</code> 中的每个元素都是预期的那样，每个元素都是一个浮点数。否则类型注解将失去意义。</p><p>正如 <em>Zen of Python</em> 所说的：</p><blockquote><p>Special cases aren&#39;t special enough to break the rules.（特殊情形不足以特殊到打破规则）</p><p><cite>——Tim Peters</cite></p></blockquote></div><h3 id="_1-3-对函数或方法注解" tabindex="-1"><a class="header-anchor" href="#_1-3-对函数或方法注解" aria-hidden="true">#</a> 1.3 对函数或方法注解</h3><p>对于函数或方法的参数，使用 <code>param: Type[ = default]</code> 的方式声明，注意默认值写在类型的后面。</p><p>对于函数的返回值，使用 <code>func(param...) -&gt; Type: ...</code> 语法，注意类型写在冒号的前面，<code>-&gt;</code> 换行需要加上 <code>\\</code>，否则解释器会抛出语法错误。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MetaData</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">data</span><span style="color:#D4D4D4;">: dict[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">],</span></span>
<span class="line"><span style="color:#D4D4D4;">                 </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._meta = data</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._key = key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">get_metadata</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">) -&gt; dict[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">]:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#CE9178;">&#39;&#39;&#39;return meta data which is dict type</span></span>
<span class="line"><span style="color:#CE9178;">        &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._meta</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">get_key</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._key </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._key </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类的一个方法参数是类的实例，直接使用类型注解可能会报错，可以将类型名称作为字符串写入，例如：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Action</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._step = []</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._name = name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">add_new_action</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">action</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;Action&#39;</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        action._step.append(action._name)</span></span>
<span class="line"></span></code></pre></div><p>字符串类型的注解也会被多数 IDE 正确识别，但在反射时获取的签名和 <code>Action</code> 不同。</p><h2 id="_2-泛型类" tabindex="-1"><a class="header-anchor" href="#_2-泛型类" aria-hidden="true">#</a> 2. 泛型类</h2><h3 id="_2-1-泛型工厂" tabindex="-1"><a class="header-anchor" href="#_2-1-泛型工厂" aria-hidden="true">#</a> 2.1 泛型工厂</h3><p>泛型工厂的原理是类实现类方法 <code>__class_getitem__()</code>，这样对类的任何下标操作都会被这个方法产生新的类型别名。</p><p>例如，内置类可以生成任意的类型别名：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">str_int_dict = dict[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">d = str_int_dict()</span></span>
<span class="line"></span></code></pre></div><p><code>str_int_dict</code> 的类型是类型别名，可以使用类型别名创建类的实例，这和原来的类型行为上没有区别，只是有了类型注解。</p><p>如何定义自己的类型别名？使用 <code>typing.TypeVar</code> 定义：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> typing </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> TypeVar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">T = TypeVar(</span><span style="color:#CE9178;">&#39;T&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>现在你可以定义 <code>list[T]</code> 表示一个你定义的类型名，但这个类型名不表示任何类型，就像你在 C++ 使用 <code>template &lt;class T&gt;</code> 一样。</p><p>你可以定义类型范围</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># 可以是任意类型</span></span>
<span class="line"><span style="color:#D4D4D4;">T = TypeVar(</span><span style="color:#CE9178;">&#39;T&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># 只能是 str 或者 bytes</span></span>
<span class="line"><span style="color:#D4D4D4;">A = TypeVar(</span><span style="color:#CE9178;">&#39;A&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">bytes</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-2-泛型类" tabindex="-1"><a class="header-anchor" href="#_2-2-泛型类" aria-hidden="true">#</a> 2.2 泛型类</h3><p>可以通过继承 <code>typing.Generic[T]</code> 的方式继承，在类方法上可以使用 <code>T</code> 作为类型注解。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> typing </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> TypeVar, Generic</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> logging </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Logger</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">T = TypeVar(</span><span style="color:#CE9178;">&#39;T&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LoggedVar</span><span style="color:#D4D4D4;">(Generic[T]):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">: T, </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                 </span><span style="color:#9CDCFE;">logger</span><span style="color:#D4D4D4;">: Logger) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.name = name</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.logger = logger</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.value = value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">set</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">new</span><span style="color:#D4D4D4;">: T) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.log(</span><span style="color:#CE9178;">&#39;Set &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#DCDCAA;">repr</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.value))</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.value = new</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">get</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">) -&gt; T:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.log(</span><span style="color:#CE9178;">&#39;Get &#39;</span><span style="color:#D4D4D4;"> + </span><span style="color:#DCDCAA;">repr</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.value))</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.logger.info(</span><span style="color:#CE9178;">&#39;</span><span style="color:#569CD6;">%s</span><span style="color:#CE9178;">: </span><span style="color:#569CD6;">%s</span><span style="color:#CE9178;">&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.name, message)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Generic[T]</code> 是 <code>LoggedVar</code> 类的基类，采用了单类型参数 <code>T</code>。因此，在该类体内，T 是有效的类型。</p><p><code>Generic</code> 基类定义了 <code>__class_getitem__()</code> ，因此，<code>LoggedVar[T]</code> 类型也有效</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> collections.abc </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Iterable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">zero_all_vars</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">vars</span><span style="color:#D4D4D4;">: Iterable[LoggedVar[</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">]]) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> var </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">vars</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        var.set(</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-3-generic-特征" tabindex="-1"><a class="header-anchor" href="#_2-3-generic-特征" aria-hidden="true">#</a> 2.3 Generic 特征</h3><p>注意，下标列表中的类型不能冗余，<code>Generic[T, T]</code> 这样是错误的，下标列表类似于 C++ <code>template&lt;&gt;</code> 列表，表示泛型的类型数量。<code>Generic[KT, VT]</code> 表示类似于 C++ <code>template&lt;class KT, class VT&gt;</code> 模板语法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">KT = TypeVar(</span><span style="color:#CE9178;">&#39;KT&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">VT = TypeVar(</span><span style="color:#CE9178;">&#39;VT&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Mapping</span><span style="color:#D4D4D4;">(Generic[KT, VT]):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__getitem__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">: KT) -&gt; VT:</span></span>
<span class="line"><span style="color:#D4D4D4;">        ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">lookup_name</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">mapping</span><span style="color:#D4D4D4;">: Mapping[KT, VT], </span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">: KT,</span></span>
<span class="line"><span style="color:#D4D4D4;">                    </span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">: VT) -&gt; VT:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> mapping[key]</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">except</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">KeyError</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> default</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Generic</code> 可使用多继承</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> collections.abc </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Sized</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> typing </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> TypeVar, Generic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">T = TypeVar(</span><span style="color:#CE9178;">&#39;T&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">LinkedList</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">Sized</span><span style="color:#D4D4D4;">, Generic[T]):</span></span>
<span class="line"><span style="color:#D4D4D4;">    ...</span></span>
<span class="line"></span></code></pre></div><p>从泛型类继承时，有些类型变量可能是固定的</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> collections.abc </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Mapping</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> typing </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> TypeVar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">T = TypeVar(</span><span style="color:#CE9178;">&#39;T&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MyDict</span><span style="color:#D4D4D4;">(Mapping[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, T]):</span></span>
<span class="line"><span style="color:#D4D4D4;">    ...</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-4-示例-泛型的队列" tabindex="-1"><a class="header-anchor" href="#_2-4-示例-泛型的队列" aria-hidden="true">#</a> 2.4 示例：泛型的队列</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> typing </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Generic, TypeVar</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> collections </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> deque</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">T = TypeVar(</span><span style="color:#CE9178;">&#39;T&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Queue</span><span style="color:#D4D4D4;">(Generic[T]):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._queue = deque[T]()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">: T) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._queue.append(item)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">) -&gt; T:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._queue.popleft()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">is_empty</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">bool</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">._queue) == </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就相当于 C++ 的下面的写法</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">#include</span><span style="color:#569CD6;"> </span><span style="color:#CE9178;">&lt;queue&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">template</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt;</span></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Queue</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">private:</span></span>
<span class="line"><span style="color:#D4D4D4;">    deque&lt;T&gt; queue;</span></span>
<span class="line"><span style="color:#569CD6;">public:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">item</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">queue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push_back</span><span style="color:#D4D4D4;">(item);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        T item = </span><span style="color:#9CDCFE;">queue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">front</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">queue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop_front</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> item;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">bool</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">isEmpty</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">queue</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">empty</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个 <code>int</code> 型的的 <code>Queue</code> 试试</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">queue = Queue[</span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">]()</span></span>
<span class="line"></span></code></pre></div><p>这样，你的 IDE 会在你输入 <code>queue.front()</code> 时提示它返回一个 <code>int</code> 型的值。</p><p>例如，你的 IDE 提示 <code>(method) front: () -&gt; int</code>，但如果你写的是</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">queue = Queue()</span></span>
<span class="line"></span></code></pre></div><p>你的 IDE 告诉你 <code>(method) front: () -&gt; Any</code>，<code>typing.Any</code> 表示任意类型。使用泛型类，但未指定类型参数时，每个位置的类型都会被预设为 <code>Any</code>。此处隐式继承了 <code>Queue[Any]</code> 类。</p><h3 id="_2-5-容器实现" tabindex="-1"><a class="header-anchor" href="#_2-5-容器实现" aria-hidden="true">#</a> 2.5 容器实现</h3><p><code>collections.abc</code> 定义了抽象基类，代表容器的特征。</p><p>常用容器接口：</p><ul><li><code>Hashable</code> 可哈希的，实现了 <code>__hash__()</code></li><li><code>Iterator</code> 可迭代的，实现了 <code>__next__()</code></li><li><code>Sequence</code> 序列的，实现了 <code>__getitem__()</code> 和 <code>__getitem__()</code></li></ul>`,64),m={class:"hint-container info"},b=s("p",{class:"hint-container-title"},"魔术方法",-1),E={href:"https://docs.python.org/zh-cn/3/reference/datamodel.html#special-method-names",target:"_blank",rel:"noopener noreferrer"},h=o(`<div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> collections.abc </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Mapping, Sequence</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">notify</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">employees</span><span style="color:#D4D4D4;">: Sequence[Employee],</span></span>
<span class="line"><span style="color:#D4D4D4;">           </span><span style="color:#9CDCFE;">overrides</span><span style="color:#D4D4D4;">: Mapping[</span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">]) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">: ...</span></span>
<span class="line"></span></code></pre></div>`,1);function _(g,f){const p=e("router-link"),c=e("ExternalLinkIcon"),D=e("Badge");return r(),i("div",null,[d,C,s("nav",u,[s("ul",null,[s("li",null,[a(p,{to:"#_1-类型注解"},{default:l(()=>[n("1. 类型注解")]),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#_1-1-类型注解的作用"},{default:l(()=>[n("1.1 类型注解的作用")]),_:1})]),s("li",null,[a(p,{to:"#_1-2-对内置容器使用泛型"},{default:l(()=>[n("1.2 对内置容器使用泛型")]),_:1})]),s("li",null,[a(p,{to:"#_1-3-对函数或方法注解"},{default:l(()=>[n("1.3 对函数或方法注解")]),_:1})])])]),s("li",null,[a(p,{to:"#_2-泛型类"},{default:l(()=>[n("2. 泛型类")]),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#_2-1-泛型工厂"},{default:l(()=>[n("2.1 泛型工厂")]),_:1})]),s("li",null,[a(p,{to:"#_2-2-泛型类"},{default:l(()=>[n("2.2 泛型类")]),_:1})]),s("li",null,[a(p,{to:"#_2-3-generic-特征"},{default:l(()=>[n("2.3 Generic 特征")]),_:1})]),s("li",null,[a(p,{to:"#_2-4-示例-泛型的队列"},{default:l(()=>[n("2.4 示例：泛型的队列")]),_:1})]),s("li",null,[a(p,{to:"#_2-5-容器实现"},{default:l(()=>[n("2.5 容器实现")]),_:1})])])])])]),v,s("div",m,[b,s("p",null,[n("这些双下划线的方法也被翻译为特殊方法，请参考标准库 "),s("a",E,[n("魔术方法"),a(c)]),n("。")])]),s("p",null,[a(D,{type:"danger"},{default:l(()=>[n("TODO")]),_:1}),n(" 容器的类型注解常常是这样的：")]),h])}const k=t(y,[["render",_],["__file","index.html.vue"]]);export{k as default};

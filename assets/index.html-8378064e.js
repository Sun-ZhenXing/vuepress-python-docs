import{_ as i,M as e,p as u,q as k,R as n,N as a,V as p,t as s,a1 as o}from"./framework-5f7e94ef.js";const r={},d=n("h1",{id:"python-泛型编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-泛型编程","aria-hidden":"true"},"#"),s(" Python 泛型编程")],-1),v=n("p",null,"Python 是多范式的编程语言，支持泛型编程。本文介绍使用 Python 泛型编程的一些细节和实现。",-1),m={class:"table-of-contents"},b=o(`<h2 id="_1-类型注解" tabindex="-1"><a class="header-anchor" href="#_1-类型注解" aria-hidden="true">#</a> 1. 类型注解</h2><h3 id="_1-1-类型注解的作用" tabindex="-1"><a class="header-anchor" href="#_1-1-类型注解的作用" aria-hidden="true">#</a> 1.1 类型注解的作用</h3><p>为什么使用类型注解？</p><ol><li>提高工作效率，可以帮助 IDE 完成自动类型推断</li><li>提高代码的可读性和可重用性</li><li>减少不确定性的错误和预期外的结果</li></ol><p>Python 的泛型编程和 C++/Java 的泛型编程有什么区别和共同点？</p><ol><li>共同点：都可以实现代码复用</li><li>不同点：Python 的泛型不是强制的，可以不遵循类型声明，可以使用任意的类型代替</li></ol><p>Python 使用 <code>typing</code> 模块实现类型注解，相对来讲，Python 的类型注解更加接近于 TypeScript 而不是传统的编译型语言。</p><p>类型注解用于标注、解释你的参数、返回值或容器内元素的类型。如果你想使用 Python 的泛型编程，必须了解类型注解。</p><p>虽然 Python 是动态类型的语言，但写程序时养成良好的习惯，会大大提高你的编码效率，减少错误出现，正如 <em>Zen of Python</em> 所说</p><blockquote><p>Explicit is better than implicit.（显式胜于隐式）</p><p><cite>——Tim Peters</cite></p></blockquote><p>通俗一点来讲就是，如果你的函数返回类型是可知的，就不要把它藏起来，让别人猜测你的返回类型。</p><p>一个优雅的方式是，一个标识符只绑定到一种特定的类。</p><p>有时候，一个功能需要写很多注释来说明这些参数和返回值是什么含义，但是这些注释对于用户和代码的调用者都是不可见的。所以我们使用文档字符串来描述函数或类的核心功能。</p><h3 id="_1-2-对内置容器使用泛型" tabindex="-1"><a class="header-anchor" href="#_1-2-对内置容器使用泛型" aria-hidden="true">#</a> 1.2 对内置容器使用泛型</h3><p>Python 的泛型编程不完全为代码复用而生，更像是为代码易用、代码规范而生。</p><p>内置的容器都支持泛型，写法如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 形如 (1.23, 4.56, 7.89) 的元组类型，只包含浮点数</span>
t0 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 也可以这样注解</span>
t0<span class="token punctuation">:</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 结构为 (str, int) 型的元组</span>
t1 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 从字符串映射到列表的字典类型，列表的元素是整型的</span>
d0 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 包含字符串元组的列表</span>
l0 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，在 IDE 中编写程序，调用这些变量的方法时，会有大量的类型推断或智能提示。IDE 也会在你不使用注解时尽可能多地推理出变量的类型，并在你可能出错的地方给予警告。</p><div class="hint-container warning"><p class="hint-container-title">非强制类型</p><p>与 TypeScript 不同的是，Python 的类型注解不是强制的，你不必保证在 <code>d0</code> 中的每个元素都是 <code>float</code> 类型的。</p><p>但是，既然我们是这么写的，我们应该保证程序在运行时，<code>t0</code> 中的每个元素都是预期的那样，每个元素都是一个浮点数。否则类型注解将失去意义。</p><p>正如 <em>Zen of Python</em> 所说的：</p><blockquote><p>Special cases aren&#39;t special enough to break the rules.（特殊情形不足以特殊到打破规则）</p><p><cite>——Tim Peters</cite></p></blockquote></div><h3 id="_1-3-对函数或方法注解" tabindex="-1"><a class="header-anchor" href="#_1-3-对函数或方法注解" aria-hidden="true">#</a> 1.3 对函数或方法注解</h3><p>对于函数或方法的参数，使用 <code>param: Type[ = default]</code> 的方式声明，注意默认值写在类型的后面。</p><p>对于函数的返回值，使用 <code>func(param...) -&gt; Type: ...</code> 语法，注意类型写在冒号的前面，<code>-&gt;</code> 换行需要加上 <code>\\</code>，否则解释器会抛出语法错误。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MetaData</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                 key<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_meta <span class="token operator">=</span> data
        self<span class="token punctuation">.</span>_key <span class="token operator">=</span> key

    <span class="token keyword">def</span> <span class="token function">get_metadata</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39;return meta data which is dict type
        &#39;&#39;&#39;</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_meta

    <span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_key <span class="token keyword">if</span> self<span class="token punctuation">.</span>_key <span class="token keyword">else</span> <span class="token string">&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类的一个方法参数是类的实例，直接使用类型注解可能会报错，可以将类型名称作为字符串写入，例如：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Action</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_step <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">add_new_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token string">&#39;Action&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        action<span class="token punctuation">.</span>_step<span class="token punctuation">.</span>append<span class="token punctuation">(</span>action<span class="token punctuation">.</span>_name<span class="token punctuation">)</span>
</code></pre></div><p>字符串类型的注解也会被多数 IDE 正确识别，但在反射时获取的签名和 <code>Action</code> 不同。</p><h2 id="_2-泛型类" tabindex="-1"><a class="header-anchor" href="#_2-泛型类" aria-hidden="true">#</a> 2. 泛型类</h2><h3 id="_2-1-泛型工厂" tabindex="-1"><a class="header-anchor" href="#_2-1-泛型工厂" aria-hidden="true">#</a> 2.1 泛型工厂</h3><p>泛型工厂的原理是类实现类方法 <code>__class_getitem__()</code>，这样对类的任何下标操作都会被这个方法产生新的类型别名。</p><p>例如，内置类可以生成任意的类型别名：</p><div class="language-python" data-ext="py"><pre class="language-python"><code>str_int_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span>
d <span class="token operator">=</span> str_int_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p><code>str_int_dict</code> 的类型是类型别名，可以使用类型别名创建类的实例，这和原来的类型行为上没有区别，只是有了类型注解。</p><p>如何定义自己的类型别名？使用 <code>typing.TypeVar</code> 定义：</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>现在你可以定义 <code>list[T]</code> 表示一个你定义的类型名，但这个类型名不表示任何类型，就像你在 C++ 使用 <code>template &lt;class T&gt;</code> 一样。</p><p>你可以定义类型范围</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 可以是任意类型</span>
T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 只能是 str 或者 bytes</span>
A <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="_2-2-泛型类" tabindex="-1"><a class="header-anchor" href="#_2-2-泛型类" aria-hidden="true">#</a> 2.2 泛型类</h3><p>可以通过继承 <code>typing.Generic[T]</code> 的方式继承，在类方法上可以使用 <code>T</code> 作为类型注解。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar<span class="token punctuation">,</span> Generic
<span class="token keyword">from</span> logging <span class="token keyword">import</span> Logger

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">LoggedVar</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
                 logger<span class="token punctuation">:</span> Logger<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>logger <span class="token operator">=</span> logger
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> value

    <span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> new<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">&#39;Set &#39;</span> <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>value <span class="token operator">=</span> new

    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> T<span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">&#39;Get &#39;</span> <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>value

    <span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;%s: %s&#39;</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Generic[T]</code> 是 <code>LoggedVar</code> 类的基类，采用了单类型参数 <code>T</code>。因此，在该类体内，T 是有效的类型。</p><p><code>Generic</code> 基类定义了 <code>__class_getitem__()</code> ，因此，<code>LoggedVar[T]</code> 类型也有效</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable

<span class="token keyword">def</span> <span class="token function">zero_all_vars</span><span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">:</span> Iterable<span class="token punctuation">[</span>LoggedVar<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> var <span class="token keyword">in</span> <span class="token builtin">vars</span><span class="token punctuation">:</span>
        var<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="_2-3-generic-特征" tabindex="-1"><a class="header-anchor" href="#_2-3-generic-特征" aria-hidden="true">#</a> 2.3 Generic 特征</h3><p>注意，下标列表中的类型不能冗余，<code>Generic[T, T]</code> 这样是错误的，下标列表类似于 C++ <code>template&lt;&gt;</code> 列表，表示泛型的类型数量。<code>Generic[KT, VT]</code> 表示类似于 C++ <code>template&lt;class KT, class VT&gt;</code> 模板语法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>KT <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;KT&#39;</span><span class="token punctuation">)</span>
VT <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;VT&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Mapping</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>KT<span class="token punctuation">,</span> VT<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> KT<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> VT<span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">lookup_name</span><span class="token punctuation">(</span>mapping<span class="token punctuation">:</span> Mapping<span class="token punctuation">[</span>KT<span class="token punctuation">,</span> VT<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> KT<span class="token punctuation">,</span>
                    default<span class="token punctuation">:</span> VT<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> VT<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> mapping<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>
            <span class="token keyword">return</span> default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Generic</code> 可使用多继承</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Sized
<span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar<span class="token punctuation">,</span> Generic

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span>Sized<span class="token punctuation">,</span> Generic<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><p>从泛型类继承时，有些类型变量可能是固定的</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Mapping
<span class="token keyword">from</span> typing <span class="token keyword">import</span> TypeVar

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">MyDict</span><span class="token punctuation">(</span>Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div><h3 id="_2-4-示例-泛型的队列" tabindex="-1"><a class="header-anchor" href="#_2-4-示例-泛型的队列" aria-hidden="true">#</a> 2.4 示例：泛型的队列</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Generic<span class="token punctuation">,</span> TypeVar
<span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_queue <span class="token operator">=</span> deque<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> T<span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">is_empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_queue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就相当于 C++ 的下面的写法</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    deque<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> queue<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>T item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queue<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    T <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        T item <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> item<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个 <code>int</code> 型的的 <code>Queue</code> 试试</p><div class="language-python" data-ext="py"><pre class="language-python"><code>queue <span class="token operator">=</span> Queue<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>这样，你的 IDE 会在你输入 <code>queue.front()</code> 时提示它返回一个 <code>int</code> 型的值。</p><p>例如，你的 IDE 提示 <code>(method) front: () -&gt; int</code>，但如果你写的是</p><div class="language-python" data-ext="py"><pre class="language-python"><code>queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>你的 IDE 告诉你 <code>(method) front: () -&gt; Any</code>，<code>typing.Any</code> 表示任意类型。使用泛型类，但未指定类型参数时，每个位置的类型都会被预设为 <code>Any</code>。此处隐式继承了 <code>Queue[Any]</code> 类。</p><h3 id="_2-5-容器实现" tabindex="-1"><a class="header-anchor" href="#_2-5-容器实现" aria-hidden="true">#</a> 2.5 容器实现</h3><p><code>collections.abc</code> 定义了抽象基类，代表容器的特征。</p><p>常用容器接口：</p><ul><li><code>Hashable</code> 可哈希的，实现了 <code>__hash__()</code></li><li><code>Iterator</code> 可迭代的，实现了 <code>__next__()</code></li><li><code>Sequence</code> 序列的，实现了 <code>__getitem__()</code> 和 <code>__getitem__()</code></li></ul>`,64),y={class:"hint-container info"},g=n("p",{class:"hint-container-title"},"魔术方法",-1),h={href:"https://docs.python.org/zh-cn/3/reference/datamodel.html#special-method-names",target:"_blank",rel:"noopener noreferrer"},_=o(`<div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Mapping<span class="token punctuation">,</span> Sequence

<span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>employees<span class="token punctuation">:</span> Sequence<span class="token punctuation">[</span>Employee<span class="token punctuation">]</span><span class="token punctuation">,</span>
           overrides<span class="token punctuation">:</span> Mapping<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre></div>`,1);function f(T,w){const t=e("router-link"),c=e("ExternalLinkIcon"),l=e("Badge");return u(),k("div",null,[d,v,n("nav",m,[n("ul",null,[n("li",null,[a(t,{to:"#_1-类型注解"},{default:p(()=>[s("1. 类型注解")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_1-1-类型注解的作用"},{default:p(()=>[s("1.1 类型注解的作用")]),_:1})]),n("li",null,[a(t,{to:"#_1-2-对内置容器使用泛型"},{default:p(()=>[s("1.2 对内置容器使用泛型")]),_:1})]),n("li",null,[a(t,{to:"#_1-3-对函数或方法注解"},{default:p(()=>[s("1.3 对函数或方法注解")]),_:1})])])]),n("li",null,[a(t,{to:"#_2-泛型类"},{default:p(()=>[s("2. 泛型类")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_2-1-泛型工厂"},{default:p(()=>[s("2.1 泛型工厂")]),_:1})]),n("li",null,[a(t,{to:"#_2-2-泛型类"},{default:p(()=>[s("2.2 泛型类")]),_:1})]),n("li",null,[a(t,{to:"#_2-3-generic-特征"},{default:p(()=>[s("2.3 Generic 特征")]),_:1})]),n("li",null,[a(t,{to:"#_2-4-示例-泛型的队列"},{default:p(()=>[s("2.4 示例：泛型的队列")]),_:1})]),n("li",null,[a(t,{to:"#_2-5-容器实现"},{default:p(()=>[s("2.5 容器实现")]),_:1})])])])])]),b,n("div",y,[g,n("p",null,[s("这些双下划线的方法也被翻译为特殊方法，请参考标准库 "),n("a",h,[s("魔术方法"),a(c)]),s("。")])]),n("p",null,[a(l,{type:"danger"},{default:p(()=>[s("TODO")]),_:1}),s(" 容器的类型注解常常是这样的：")]),_])}const V=i(r,[["render",f],["__file","index.html.vue"]]);export{V as default};

import{_ as c,r as t,o as r,c as D,b as s,a,w as o,d as n,e as p}from"./app-fnnGyvh1.js";const i={},d=s("h1",{id:"8-pyside6-构建和发布",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#8-pyside6-构建和发布","aria-hidden":"true"},"#"),n(" 8. PySide6 构建和发布")],-1),y={class:"table-of-contents"},u=p(`<h2 id="81-使用-pyinstaller-打包" tabindex="-1"><a class="header-anchor" href="#81-使用-pyinstaller-打包" aria-hidden="true">#</a> 8.1 使用 PyInstaller 打包</h2><h3 id="811-pyinstaller-的基本使用" tabindex="-1"><a class="header-anchor" href="#811-pyinstaller-的基本使用" aria-hidden="true">#</a> 8.1.1 PyInstaller 的基本使用</h3><p>PyInstaller 是最成熟稳定的打包工具了，且有良好的跨平台性能。PyInstaller 打包尽可能保留解释器的相关功能，因此相当于将解释器包装起来，这样的结果是 PyInstaller 不能增加程序（Python 解释器）的性能，反而会降低性能。</p><p>安装 PyInstaller：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pyinstaller</span></span>
<span class="line"></span></code></pre></div><p>PyInstaller 的使用非常简单，只需要指定被打包脚本即可，例如下面的 <code>hello.py</code>（此代码来源为<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> random</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> PySide6.QtCore </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Qt, Slot</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> PySide6.QtWidgets </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> QApplication, QLabel, QPushButton, QVBoxLayout, QWidget</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MyWidget</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">QWidget</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        QWidget.</span><span style="color:#DCDCAA;">__init__</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.hello = [</span><span style="color:#CE9178;">&quot;Hallo Welt&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;你好，世界&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Hei maailma&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Hola Mundo&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&quot;Привет мир&quot;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.button = QPushButton(</span><span style="color:#CE9178;">&quot;Click me!&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.text = QLabel(</span><span style="color:#CE9178;">&quot;Hello World&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.text.setAlignment(Qt.AlignCenter)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.layout = QVBoxLayout()</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.layout.addWidget(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.text)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.layout.addWidget(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.button)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.setLayout(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.layout)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;"># Connecting the signal</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.button.clicked.connect(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.magic)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">@Slot</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">magic</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">self</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.text.setText(random.choice(</span><span style="color:#569CD6;">self</span><span style="color:#D4D4D4;">.hello))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;__main__&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    app = QApplication(sys.argv)</span></span>
<span class="line"><span style="color:#D4D4D4;">    widget = MyWidget()</span></span>
<span class="line"><span style="color:#D4D4D4;">    widget.resize(</span><span style="color:#B5CEA8;">800</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">600</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    widget.show()</span></span>
<span class="line"><span style="color:#D4D4D4;">    sys.exit(app.exec())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备一个图标 <code>hello.ico</code> 文件：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pyinstaller</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-i</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hello.ico</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">-w</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hello.py</span></span>
<span class="line"></span></code></pre></div><p>常见参数：</p><ul><li><code>-i ...</code>：指定一个图标</li><li><code>-w</code>：不包含控制台</li><li><code>-F</code>：打包为单个可执行文件</li><li><code>--clean</code>：每次打包时清除上一次缓存</li></ul><h3 id="812-使用-upx-压缩程序" tabindex="-1"><a class="header-anchor" href="#812-使用-upx-压缩程序" aria-hidden="true">#</a> 8.1.2 使用 UPX 压缩程序</h3>`,12),C={href:"https://github.com/upx/upx/releases/latest",target:"_blank",rel:"noopener noreferrer"},h=p(`<p>可以通过指定 <code>--upx-dir ...</code> 来指定 UPX 路径，默认在路径上查找。</p><h3 id="813-使用-auto-py-to-exe" tabindex="-1"><a class="header-anchor" href="#813-使用-auto-py-to-exe" aria-hidden="true">#</a> 8.1.3 使用 Auto PY to EXE</h3><p>如果我们想可视化地进行打包任务呢？Auto PY to EXE 是一个 GUI 程序，帮助我们可视化地选择 PyInstaller 参数，非常适合新手使用。安装：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">auto-py-to-exe</span></span>
<span class="line"></span></code></pre></div><p>使用：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">auto-py-to-exe</span></span>
<span class="line"></span></code></pre></div>`,6),E={href:"https://github.com/brentvollebregt/auto-py-to-exe/blob/master/README-Chinese.md",target:"_blank",rel:"noopener noreferrer"},b=p(`<h2 id="82-使用-nuitka-打包" tabindex="-1"><a class="header-anchor" href="#82-使用-nuitka-打包" aria-hidden="true">#</a> 8.2 使用 Nuitka 打包</h2><h3 id="821-nuitka-简介" tabindex="-1"><a class="header-anchor" href="#821-nuitka-简介" aria-hidden="true">#</a> 8.2.1 Nuitka 简介</h3><p>Nuitka 是一个 Python 编写的 Python 解释器，支持 CPython 代码，可编译 Python 代码到 C++ 程序，并使用 <code>libpython</code> 来执行这些代码，就像 CPython 一样。<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><p>Nuitka 尽可能对代码翻译为 C 代码进行优化，同时不损失代码的兼容性。因此 Nuitka 打包更小、更快，同时保密性更好，难以被破解。虽然 PyInstaller 支持使用 <code>--key</code> 选项进行加密，但是我们很容易逆向得到密码从而解密出数据。</p><p>Nuitka 是双协议发布的，开源部分受到社区和官方支持。而更好的服务则是 Nuitka 开发商的付费项目，包括敏感字符串加密、更多编译器支持等。对于本文而言，开源部分已经足够。</p><p>Nuitka 对于 32 位程序和更老的系统（例如 Windows 7 以下）支持不好，Nuitka 使用最新的套件，例如 Nuitka 的开源版本对于 MSVC 的支持仅限于最新版本，如果您的项目需要打包 32 位程序或有更严格的兼容性需求，请使用 PyInstaller，或者考虑使用 Nuitka 的付费服务获得支持。</p><h3 id="822-安装并配置-nuitka" tabindex="-1"><a class="header-anchor" href="#822-安装并配置-nuitka" aria-hidden="true">#</a> 8.2.2 安装并配置 Nuitka</h3><p>安装 Nuitka：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">nuitka</span></span>
<span class="line"></span></code></pre></div><p>Nuitka 还有一些依赖包，在新版本的 PySide6 中将自动安装。如果您使用的是旧版本的 PySide6，可以手动安装依赖包：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">pip3</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">install</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">ordered-set</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">zstandard</span></span>
<span class="line"></span></code></pre></div><p>这里我们引用官方示例，演示如何使用 Nuitka 进行打包：<sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup></p><p>我们先运行测试命令：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">nuitka</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hello.py</span></span>
<span class="line"></span></code></pre></div><h3 id="823-使用-mingw-作为编译器打包" tabindex="-1"><a class="header-anchor" href="#823-使用-mingw-作为编译器打包" aria-hidden="true">#</a> 8.2.3 使用 MinGW 作为编译器打包</h3><p>Nuitka 要求安装 C/C++ 编译器，这一节我们使用 MinGW 作为编译器，不需要安装 MinGW，Nuitka 会自动管理。</p><p>首先，我们先看看 <code>nuitka</code> 命令都包含一些什么功能：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">nuitka</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--help</span></span>
<span class="line"></span></code></pre></div><p>打印了非常多的内容，但我们能得到很多有用信息，这是第一手的资料，当需要查询命令的时候我们应该在这里查看，这有时候比搜索引擎更有用。</p><p>为了使用 MinGW 作为编译器，我们通常指定 <code>--mingw64</code> 来确保使用的是 MinGW 而不是其他。</p><p>这里还有一些关键参数，Nuitka 适配了许多第三方库，这也包括 PySide6，这被包含在插件中，使用 <code>--plugin-enable=pyside6</code> 来启用它。</p>`,21),v={class:"hint-container details"},m=p(`<summary>第三方适配库</summary><p>如果需要查询有哪些已经适配的第三方库，可以通过下面的命令查询：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">nuitka</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--plugin-list</span></span>
<span class="line"></span></code></pre></div><p>当前版本（1.4.3）的结果为：</p><table><thead><tr><th>插件</th><th>说明</th></tr></thead><tbody><tr><td><code>anti-bloat</code></td><td>Patch stupid imports out of widely used library modules source codes.</td></tr><tr><td><code>data-files</code></td><td></td></tr><tr><td><code>delvewheel</code></td><td>Required for support of delvewheel using packages in standalone mode</td></tr><tr><td><code>dill-compat</code></td><td></td></tr><tr><td><code>dll-files</code></td><td></td></tr><tr><td><code>enum-compat</code></td><td></td></tr><tr><td><code>eventlet</code></td><td>Support for including &#39;eventlet&#39; dependencies and its need for &#39;dns&#39; package monkey patching</td></tr><tr><td><code>gevent</code></td><td>Required by the gevent package</td></tr><tr><td><code>gi</code></td><td>Support for GI typelib dependency</td></tr><tr><td><code>glfw</code></td><td>Required for OpenGL and glfw in standalone mode</td></tr><tr><td><code>implicit-imports</code></td><td></td></tr><tr><td><code>kivy</code></td><td>Required by kivy package</td></tr><tr><td><code>matplotlib</code></td><td>Required for matplotlib module</td></tr><tr><td><code>multiprocessing</code></td><td>Required by Python&#39;s multiprocessing module</td></tr><tr><td><code>no-qt</code></td><td>Disable all Qt bindings for standalone mode.</td></tr><tr><td><code>numpy</code></td><td>Deprecated, was once required by the numpy package</td></tr><tr><td><code>options-nanny</code></td><td></td></tr><tr><td><code>pbr-compat</code></td><td></td></tr><tr><td><code>pkg-resources</code></td><td>Workarounds for &#39;pkg_resources&#39;.</td></tr><tr><td><code>pmw-freezer</code></td><td>Required by the Pmw package</td></tr><tr><td><code>pylint-warnings</code></td><td>Support PyLint / PyDev linting source markers</td></tr><tr><td><code>pyqt5</code></td><td>Required by the PyQt5 package.</td></tr><tr><td><code>pyqt6</code></td><td>Required by the PyQt6 package for standalone mode.</td></tr><tr><td><code>pyside2</code></td><td>Required by the PySide2 package.</td></tr><tr><td><code>pyside6</code></td><td>Required by the PySide6 package for standalone mode.</td></tr><tr><td><code>pywebview</code></td><td>Required by the webview package (pywebview on PyPI)</td></tr><tr><td><code>tensorflow</code></td><td>Deprecated, was once required by the tensorflow package</td></tr><tr><td><code>tk-inter</code></td><td>Required by Python&#39;s Tk modules</td></tr><tr><td><code>torch</code></td><td>Deprecated, was once required by the torch package</td></tr><tr><td><code>trio</code></td><td>Required for Trio package</td></tr><tr><td><code>upx</code></td><td>Compress created binaries with UPX automatically</td></tr></tbody></table>`,5),k={href:"https://github.com/Nuitka/Nuitka/blob/develop/Standard-Plugins-Documentation.rst",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>还有一些常用的参数：</p><ul><li><code>--standalone</code>：表示打包一个不依赖于系统 Python 环境的应用</li><li><code>--onefile</code>：表示打包为一个文件，这与 <code>--standalone</code> 同时使用</li><li><code>--disable-console</code>：不生成控制台</li><li><code>--output-dir=...</code>：生成可执行文件到指定文件夹</li><li><code>--follow-imports</code>：递归地编译整个程序</li><li><code>--include-plugin-directory</code>：包含一个完整的目录以适应动态导入</li><li><code>--module</code>：将目标编译为模块（链接库）</li><li><code>--show-progress</code>：显示编译的进度</li><li><code>--show-memory</code>：显示内存的占用</li></ul><p>下面我们就开始测试：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">nuitka</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--onefile</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--standalone</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--disable-console</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--mingw64</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--plugin-enable=pyside6</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hello.py</span></span>
<span class="line"></span></code></pre></div><p>第一次使用时，会询问你是否下载 MinGW 依赖，输入 <code>Yes</code> 确认。下载过程可能会出错，只需要手动下载然后将压缩包放置到 Nuitka 指定的文件夹即可。</p><div class="hint-container info"><p class="hint-container-title">下载失败</p><p>如果下载失败，请将链接复制到浏览器中（最好使用代理），然后下载。常规情况下是放到 <code>C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\Nuitka\\Nuitka\\Cache\\downloads\\gcc\\x86_64\\</code> 下的文件夹内，请参考错误提示。</p></div><p>接下来等待打包完成进行测试。</p><div class="hint-container tip"><p class="hint-container-title">指定图标</p><p>不同的操作系统打包图标的方式不同：</p><ul><li><code>--windows-icon-from-ico=...</code>：指定一个 Windows 应用图标</li><li><code>--macos-app-icon=...</code>：指定一个 Mac OS 应用图标</li><li><code>--linux-icon=...</code>：指定一个 Linux 应用图标</li></ul></div><h3 id="824-使用-msvc-作为编译器打包" tabindex="-1"><a class="header-anchor" href="#824-使用-msvc-作为编译器打包" aria-hidden="true">#</a> 8.2.4 使用 MSVC 作为编译器打包</h3><div class="hint-container info"><p class="hint-container-title">选择 MSVC 还是 MinGW</p><p>从官方的单元测试结果来看，对于 64 位的 Python，MinGW 编译出的程序速度要比 MSVC 快大约 20%。而且 Nuitka 能自动管理独立的 MinGW 环境，建议使用 MinGW。</p></div><p>请安装最新版本的 Visual Studio，并选择 C/C++ 支持进行安装，还需要至少安装一个和编译器适配的 Windows SDK。</p><p>使用 MSVC 的步骤和 MinGW 一致，只不过需要将 <code>--mingw64</code> 参数替换为 <code>--msvc=...</code>，根据你所安装的 MSVC 版本作为参数，当前最新为 14.3 版本，示例命令如下：</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">nuitka</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--standalone</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--disable-console</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--msvc=14.3</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--plugin-enable=pyside6</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hello.py</span></span>
<span class="line"></span></code></pre></div><p>输出如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">pyside-venv</span><span style="color:#D4D4D4;">) D:</span><span style="color:#D7BA7D;">\\w</span><span style="color:#D4D4D4;">orkspace</span><span style="color:#D7BA7D;">\\r</span><span style="color:#D4D4D4;">epo</span><span style="color:#D7BA7D;">\\p</span><span style="color:#D4D4D4;">yside-book&gt;nuitka --standalone --disable-console --msvc=14.3 --plugin-enable=pyside6 hello.py</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Options:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Used</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">command</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">line</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">options:</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--standalone</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--disable-console</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--msvc=14.3</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">--plugin-enable=pyside6</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hello.py</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Starting</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">compilation</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">with</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Nuitka</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;1.4.3&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">on</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;3.10&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">commercial</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">grade</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;not installed&#39;.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Plugins:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pyside6:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Injecting</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pre-module</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">load</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">code</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">module</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;PySide6&#39;:</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Plugins:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pyside6:</span><span style="color:#D4D4D4;">     </span><span style="color:#CE9178;">Adding</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">binary</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">folder</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">to</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">runtime</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;PATH&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">environment</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">proper</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Qt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">loading.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Plugins:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pyside6:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Injecting</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">post-module</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">load</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">code</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">module</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;PySide6.QtCore&#39;:</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Plugins:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pyside6:</span><span style="color:#D4D4D4;">     </span><span style="color:#CE9178;">Setting</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Qt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">library</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">path</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">to</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">distribution</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">folder.</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">We</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">need</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">to</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">avoid</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">loading</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">target</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Plugins:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pyside6:</span><span style="color:#D4D4D4;">     </span><span style="color:#CE9178;">system</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Qt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">plugins,</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">which</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">may</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">be</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">another</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Qt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">version.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Completed</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">level</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">compilation</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">and</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">optimization.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Generating</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">source</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">code</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">C</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">backend</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">compiler.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Running</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">data</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">composer</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">tool</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">for</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">optimal</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">constant</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">value</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">handling.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Running</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">C</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">compilation</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">via</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Scons.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Scons:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Backend</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">C</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">compiler:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">cl</span><span style="color:#D4D4D4;"> (cl </span><span style="color:#B5CEA8;">14.3</span><span style="color:#D4D4D4;">).</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Scons:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Backend</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">linking</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">program</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">with</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">files</span><span style="color:#D4D4D4;"> (no </span><span style="color:#CE9178;">progress</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">information</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">available</span><span style="color:#D4D4D4;">).</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Scons:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Compiled</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">C</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">files</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">using</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">clcache</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">with</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">cache</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hits</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">and</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">cache</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">misses.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka-Plugins:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">pyside6:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Including</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Qt</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">plugins</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;iconengines,imageformats,platforms,styles,tls&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">below</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;PySide6\\qt-plugins&#39;.</span></span>
<span class="line"><span style="color:#DCDCAA;">Detecting</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">used</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">DLLs:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0.0</span><span style="color:#CE9178;">%</span><span style="color:#D4D4D4;">|                         | </span><span style="color:#DCDCAA;">0/37,</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">hello.exeNuitka</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">will</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">make</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">use</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">of</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Dependency</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Walker</span><span style="color:#D4D4D4;"> (https://dependencywalker.com) tool</span></span>
<span class="line"><span style="color:#DCDCAA;">to</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">analyze</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">the</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">dependencies</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">of</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Python</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">extension</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">modules.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">Is</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">it</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">OK</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">to</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">download</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">and</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">put</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">it</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;C:\\Users\\yalis\\AppData\\Local\\Nuitka\\Nuitka\\Cache\\downloads\\depends\\x86_64&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">No</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">installer</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">needed,</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">cached,</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">one</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">time</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">question.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">Proceed</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">and</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">download?</span><span style="color:#D4D4D4;"> [Yes]/No</span></span>
<span class="line"><span style="color:#DCDCAA;">Yes</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Downloading</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;https://dependencywalker.com/depends22_x64.zip&#39;.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Extracting</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">to</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;C:\\Users\\yalis\\AppData\\Local\\Nuitka\\Nuitka\\Cache\\downloads\\depends\\x86_64\\depends.exe&#39;</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Keeping</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">build</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">directory</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hello.build&#39;.</span></span>
<span class="line"><span style="color:#DCDCAA;">Nuitka:INFO:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Successfully</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">created</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;hello.dist\\hello.exe&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">pyside-venv</span><span style="color:#D4D4D4;">) D:</span><span style="color:#D7BA7D;">\\w</span><span style="color:#D4D4D4;">orkspace</span><span style="color:#D7BA7D;">\\r</span><span style="color:#D4D4D4;">epo</span><span style="color:#D7BA7D;">\\p</span><span style="color:#D4D4D4;">yside-book&gt;.</span><span style="color:#D7BA7D;">\\h</span><span style="color:#D4D4D4;">ello.dist</span><span style="color:#D7BA7D;">\\h</span><span style="color:#D4D4D4;">ello.exe</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="825-使用-upx-压缩" tabindex="-1"><a class="header-anchor" href="#825-使用-upx-压缩" aria-hidden="true">#</a> 8.2.5 使用 UPX 压缩</h3><p>使用选项 <code>plugin-enable=pyside6,upx</code> 开启 UPX，记得还需要参数 <code>--upx-binary={upx_path}</code> 来访问 UPX 的目录。</p><h2 id="83-嵌入式包打包" tabindex="-1"><a class="header-anchor" href="#83-嵌入式包打包" aria-hidden="true">#</a> 8.3 嵌入式包打包</h2><h3 id="831-python-嵌入包" tabindex="-1"><a class="header-anchor" href="#831-python-嵌入包" aria-hidden="true">#</a> 8.3.1 Python 嵌入包</h3><p>有时候，我们只需要源码发布，而不需要将它们压缩为一个目录或文件。这种方式适合将 Python 程序和其解释器嵌入到其他程序，有许多程序都嵌入了 Python 作为脚本解释器。</p><p>我们在 Python 官网下载软件包时，有一个选项 <strong>Windows embeddable package</strong> 很容易被我们忽略，这便是 Python 的一个最小发行版，其大小只有几 MB，很容易被嵌入到其他软件中。</p><p>一般我们通过编写脚本，可以自动将我们的环境组装起来，无需进行环境调试，将目录复制过去即可运行，这就像虚拟环境一样。如果您需要，可以包装为安装程序。</p><h3 id="832-嵌入包的用法" tabindex="-1"><a class="header-anchor" href="#832-嵌入包的用法" aria-hidden="true">#</a> 8.3.2 嵌入包的用法</h3>`,23),g={href:"https://www.python.org/ftp/python/3.10.9/python-3.10.9-embed-amd64.zip",target:"_blank",rel:"noopener noreferrer"},A=s("p",null,[n("如 "),s("code",null,"python310.zip"),n(" 包含了 Python 各种标准库，而除了可执行程序、安全目录和法律文件外，其他文件都是内置可直接导入的标准库。")],-1),_=s("p",null,[n("在此执行 "),s("code",null,"python"),n(" 和普通的 "),s("code",null,"python"),n(" 不同，很多内置函数无法使用，内置函数被放在了 "),s("code",null,"site"),n(" 库中，普通版本会自动导入此模块，如果需要自动导入，取消 "),s("code",null,"python310._pth"),n(" 文件内最后一行的注释。")],-1),x={href:"https://bootstrap.pypa.io/get-pip.py",target:"_blank",rel:"noopener noreferrer"},N=s("p",null,[s("code",null,"python310._pth"),n(" 文件指定了 Python 可读取包的路径，如果需要打包，你可以将第三方模块直接复制过来。")],-1),P=s("hr",{class:"footnotes-sep"},null,-1),w={class:"footnotes"},q={class:"footnotes-list"},I={id:"footnote1",class:"footnote-item"},S={href:"https://doc.qt.io/qtforpython/deployment-nuitka.html",target:"_blank",rel:"noopener noreferrer"},W=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),B=s("a",{href:"#footnote-ref1:1",class:"footnote-backref"},"↩︎",-1),Q={id:"footnote2",class:"footnote-item"},M={href:"https://github.com/Nuitka/Nuitka",target:"_blank",rel:"noopener noreferrer"},F=s("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1);function O(G,R){const l=t("router-link"),e=t("ExternalLinkIcon");return r(),D("div",null,[d,s("nav",y,[s("ul",null,[s("li",null,[a(l,{to:"#81-使用-pyinstaller-打包"},{default:o(()=>[n("8.1 使用 PyInstaller 打包")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#811-pyinstaller-的基本使用"},{default:o(()=>[n("8.1.1 PyInstaller 的基本使用")]),_:1})]),s("li",null,[a(l,{to:"#812-使用-upx-压缩程序"},{default:o(()=>[n("8.1.2 使用 UPX 压缩程序")]),_:1})]),s("li",null,[a(l,{to:"#813-使用-auto-py-to-exe"},{default:o(()=>[n("8.1.3 使用 Auto PY to EXE")]),_:1})])])]),s("li",null,[a(l,{to:"#82-使用-nuitka-打包"},{default:o(()=>[n("8.2 使用 Nuitka 打包")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#821-nuitka-简介"},{default:o(()=>[n("8.2.1 Nuitka 简介")]),_:1})]),s("li",null,[a(l,{to:"#822-安装并配置-nuitka"},{default:o(()=>[n("8.2.2 安装并配置 Nuitka")]),_:1})]),s("li",null,[a(l,{to:"#823-使用-mingw-作为编译器打包"},{default:o(()=>[n("8.2.3 使用 MinGW 作为编译器打包")]),_:1})]),s("li",null,[a(l,{to:"#824-使用-msvc-作为编译器打包"},{default:o(()=>[n("8.2.4 使用 MSVC 作为编译器打包")]),_:1})]),s("li",null,[a(l,{to:"#825-使用-upx-压缩"},{default:o(()=>[n("8.2.5 使用 UPX 压缩")]),_:1})])])]),s("li",null,[a(l,{to:"#83-嵌入式包打包"},{default:o(()=>[n("8.3 嵌入式包打包")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#831-python-嵌入包"},{default:o(()=>[n("8.3.1 Python 嵌入包")]),_:1})]),s("li",null,[a(l,{to:"#832-嵌入包的用法"},{default:o(()=>[n("8.3.2 嵌入包的用法")]),_:1})])])])])]),u,s("p",null,[n("UPX 可以压缩可执行文件的大小。UPX 在主流系统都可以使用，请 "),s("a",C,[n("下载 UPX"),a(e)]),n("，然后解压到路径上。")]),h,s("p",null,[n("此外 Auto PY to EXE 还支持在浏览器中操作，可以远程使用，阅读 "),s("a",E,[n("中文文档"),a(e)]),n(" 以获取更多信息。")]),b,s("details",v,[m,s("p",null,[n("如果你有打包这些库的需求，那么使用 Nuitka 最合适不过了。关于支持插件的详细信息，请访问 "),s("a",k,[n("官方插件文档"),a(e)]),n("。")])]),f,s("p",null,[n("解压嵌入包至任意文件夹，例如 "),s("a",g,[n("Python 3.10.9"),a(e)]),n(" 的嵌入包。")]),A,_,s("p",null,[n("现在，这和常规的 Python 一样了！如果有一些依赖是明确不需要的可以删除，你甚至可以在此用 "),s("a",x,[n("get-pip"),a(e)]),n(" 安装 Pip 来安装别的库。")]),N,P,s("section",w,[s("ol",q,[s("li",I,[s("p",null,[n("Qt for Python & Nuitka，Qt，"),s("a",S,[n("https://doc.qt.io/qtforpython/deployment-nuitka.html"),a(e)]),n(),W,n(),B])]),s("li",Q,[s("p",null,[n("Nuitka，GitHub，"),s("a",M,[n("https://github.com/Nuitka/Nuitka"),a(e)]),n(),F])])])])])}const L=c(i,[["render",O],["__file","index.html.vue"]]);export{L as default};

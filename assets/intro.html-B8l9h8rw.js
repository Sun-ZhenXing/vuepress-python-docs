import{_ as i,r as o,o as r,c as D,b as s,d as n,a,w as l,e as c}from"./app-fnnGyvh1.js";const d={},y=s("h1",{id:"python-异步编程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-异步编程","aria-hidden":"true"},"#"),n(" Python 异步编程")],-1),v={class:"hint-container info"},u=s("p",{class:"hint-container-title"},"转载",-1),C={href:"https://www.ruanyifeng.com/blog/2019/11/python-asyncio.html",target:"_blank",rel:"noopener noreferrer"},m={class:"table-of-contents"},h=c(`<p>Python 3.4 引入了 <code>asyncio</code> 模块，增加了异步编程，跟 JavaScript 的 <code>async/await</code> 极为类似，大大方便了异步任务的处理。</p><h2 id="python-的异步编程" tabindex="-1"><a class="header-anchor" href="#python-的异步编程" aria-hidden="true">#</a> Python 的异步编程</h2><p>历史上，Python 并不支持专门的异步编程语法，因为不需要。</p><p>有了多线程（<code>threading</code>）和多进程（<code>multiprocessing</code>），就没必要一定支持异步了。如果一个线程（或进程）阻塞，新建其他线程（或进程）就可以了，程序不会卡死。</p><p>但是，多线程有 “线程竞争” 的问题，处理起来很复杂，还涉及加锁。对于简单的异步任务来说（比如与网页互动），写起来很麻烦。</p><h2 id="asyncio-的设计" tabindex="-1"><a class="header-anchor" href="#asyncio-的设计" aria-hidden="true">#</a> asyncio 的设计</h2><p><code>asyncio</code> 模块最大特点就是，只存在一个线程。</p><p>由于只有一个线程，就不可能多个任务同时运行。<code>asyncio</code> 是 <strong>多任务合作</strong> 模式（cooperative multitasking），允许异步任务交出执行权给其他任务，等到其他任务完成，再收回执行权继续往下执行，这和 JavaScript 也是一样的。</p><p>由于代码的执行权在多个任务之间交换，所以看上去好像多个任务同时运行，其实底层只有一个线程，多个任务分享运行时间。</p><p><code>asyncio</code> 模块在单线程上启动一个事件循环（event loop），时刻监听新进入循环的事件，加以处理，并不断重复这个过程，直到异步任务结束。</p><h2 id="asyncio-api" tabindex="-1"><a class="header-anchor" href="#asyncio-api" aria-hidden="true">#</a> asyncio API</h2><p>下面介绍 <code>asyncio</code> 模块最主要的几个 API。注意，必须使用 Python 3.7 或更高版本，早期的语法已经改变了。</p><p>第一步，<code>import</code> 导入 <code>asyncio</code> 模块。</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> asyncio</span></span>
<span class="line"></span></code></pre></div><p>第二步，函数前面加上 <code>async</code> 关键字，就变成了 <code>async</code> 函数。这种函数最大特点是执行可以暂停，交出执行权。</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">pass</span></span>
<span class="line"></span></code></pre></div><p>第三步，在 <code>async</code> 函数内部的异步任务前面，加上 <code>await</code> 命令。</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> asyncio.sleep(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>上面代码中，<code>asyncio.sleep(1)</code> 方法可以生成一个异步任务，休眠 1 秒钟然后结束。</p><p>执行引擎遇到 <code>await</code> 命令，就会在异步任务开始执行之后，暂停当前 <code>async</code> 函数的执行，把执行权交给其他任务。等到异步任务结束，再把执行权交回 <code>async</code> 函数，继续往下执行。</p><p>第四步，<code>async.run()</code> 方法加载 <code>async</code> 函数，启动事件循环。</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">asyncio.run(main())</span></span>
<span class="line"></span></code></pre></div><p>上面代码中，<code>asyncio.run()</code> 在事件循环上监听 <code>async</code> 函数 <code>main()</code> 的执行。等到 <code>main()</code> 执行完了，事件循环才会终止。</p><h2 id="async-函数示例" tabindex="-1"><a class="header-anchor" href="#async-函数示例" aria-hidden="true">#</a> async 函数示例</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">count</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;One&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> asyncio.sleep(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Two&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> asyncio.gather(count(), count(), count())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">asyncio.run(main())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language-console" data-ext="console"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">$ python async.py</span></span>
<span class="line"><span style="color:#D4D4D4;">One</span></span>
<span class="line"><span style="color:#D4D4D4;">One</span></span>
<span class="line"><span style="color:#D4D4D4;">One</span></span>
<span class="line"><span style="color:#D4D4D4;">Two</span></span>
<span class="line"><span style="color:#D4D4D4;">Two</span></span>
<span class="line"><span style="color:#D4D4D4;">Two</span></span>
<span class="line"></span></code></pre></div><p>脚本总的运行时间是 1 秒，而它们同步执行的时间是 3 秒。</p>`,28),b={href:"https://www.cnblogs.com/traditional/p/17377569.html",target:"_blank",rel:"noopener noreferrer"},_=c(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> asyncio</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> functools</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">set_event</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">: asyncio.Event):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;setting event in callback&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    event.set()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">coro1</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">: asyncio.Event):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;coro1 waiting for event&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> event.wait()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;coro1 triggered&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">coro2</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">event</span><span style="color:#D4D4D4;">: asyncio.Event):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;coro2 waiting for event&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> event.wait()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;coro2 triggered&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">loop</span><span style="color:#D4D4D4;">: asyncio.AbstractEventLoop):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#6A9955;"># Create a shared event</span></span>
<span class="line"><span style="color:#D4D4D4;">    event = asyncio.Event()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;event start state: </span><span style="color:#569CD6;">{}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">.format(event.is_set()))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    loop.call_later(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, functools.partial(set_event, event))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> asyncio.gather(coro1(event), coro2(event))</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;event end state: </span><span style="color:#569CD6;">{}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">.format(event.is_set()))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">event_loop = asyncio.get_event_loop()</span></span>
<span class="line"><span style="color:#C586C0;">try</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    event_loop.run_until_complete(main(event_loop))</span></span>
<span class="line"><span style="color:#C586C0;">finally</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    event_loop.close()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function E(g,A){const p=o("ExternalLinkIcon"),e=o("router-link"),t=o("Badge");return r(),D("div",null,[y,s("div",v,[u,s("p",null,[n("原文链接："),s("a",C,[n("阮一峰的网络日志：Python 异步编程入门"),a(p)])])]),s("nav",m,[s("ul",null,[s("li",null,[a(e,{to:"#python-的异步编程"},{default:l(()=>[n("Python 的异步编程")]),_:1})]),s("li",null,[a(e,{to:"#asyncio-的设计"},{default:l(()=>[n("asyncio 的设计")]),_:1})]),s("li",null,[a(e,{to:"#asyncio-api"},{default:l(()=>[n("asyncio API")]),_:1})]),s("li",null,[a(e,{to:"#async-函数示例"},{default:l(()=>[n("async 函数示例")]),_:1})])])]),h,s("p",null,[a(t,{type:"danger"},{default:l(()=>[n("TODO")]),_:1}),n(" 需要整理的文章："),s("a",b,[n("https://www.cnblogs.com/traditional/p/17377569.html"),a(p)])]),_])}const k=i(d,[["render",E],["__file","intro.html.vue"]]);export{k as default};

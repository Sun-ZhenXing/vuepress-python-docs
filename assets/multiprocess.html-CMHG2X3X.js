import{_ as D,r as e,o as i,c as r,b as s,a,w as p,d as n,e as o}from"./app-fnnGyvh1.js";const t={},d=s("h1",{id:"python-多进程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-多进程","aria-hidden":"true"},"#"),n(" Python 多进程")],-1),y={class:"table-of-contents"},v=o(`<h2 id="1-进程" tabindex="-1"><a class="header-anchor" href="#1-进程" aria-hidden="true">#</a> 1. 进程</h2><p>多进程可以避免 Python 多线程的劣势，充分发挥多核优势。</p><h2 id="2-创建进程" tabindex="-1"><a class="header-anchor" href="#2-创建进程" aria-hidden="true">#</a> 2. 创建进程</h2><p>创建过程与多线程一致：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> multiprocessing </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> mp</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">job</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">a</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">b</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;a:&quot;</span><span style="color:#D4D4D4;">, a, </span><span style="color:#CE9178;">&quot;b:&quot;</span><span style="color:#D4D4D4;">, b)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;__main__&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1 = mp.Process(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.join()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="3-使用-queue-进行进程间通信" tabindex="-1"><a class="header-anchor" href="#3-使用-queue-进行进程间通信" aria-hidden="true">#</a> 3. 使用 <code>Queue</code> 进行进程间通信</h2><p>使用 <code>multiprocessing.Queue</code> 返回输出的值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> multiprocessing </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> mp</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">job</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">: mp.Queue, </span><span style="color:#9CDCFE;">index</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    res = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> i </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        res += i + i * i + i**</span><span style="color:#B5CEA8;">3</span></span>
<span class="line"><span style="color:#D4D4D4;">    q.put(res + index)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;__main__&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    q = mp.Queue()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1 = mp.Process(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(q, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2 = mp.Process(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(q, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.join()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2.join()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(q.get())</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(q.get())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="4-多线程与多进程对比" tabindex="-1"><a class="header-anchor" href="#4-多线程与多进程对比" aria-hidden="true">#</a> 4. 多线程与多进程对比</h2><p>性能对比</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> multiprocessing </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> mp</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> threading </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> td</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">job</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">: mp.Queue) -&gt; </span><span style="color:#569CD6;">None</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    res = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> i </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10000000</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        res += i + i * i + i**</span><span style="color:#B5CEA8;">3</span></span>
<span class="line"><span style="color:#D4D4D4;">    q.put(res)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">multicore</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    q = mp.Queue()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1 = mp.Process(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(q,))</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2 = mp.Process(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(q,))</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.join()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2.join()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;multicore:&quot;</span><span style="color:#D4D4D4;">, q.get(), q.get())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">normal</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    res = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> _ </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> i </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10000000</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">            res += i + i * i + i**</span><span style="color:#B5CEA8;">3</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;normal:&quot;</span><span style="color:#D4D4D4;">, res)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">multithread</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    q = mp.Queue()</span></span>
<span class="line"><span style="color:#D4D4D4;">    t1 = td.Thread(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(q,))</span></span>
<span class="line"><span style="color:#D4D4D4;">    t2 = td.Thread(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(q,))</span></span>
<span class="line"><span style="color:#D4D4D4;">    t1.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    t2.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    t1.join()</span></span>
<span class="line"><span style="color:#D4D4D4;">    t2.join()</span></span>
<span class="line"><span style="color:#D4D4D4;">    res1 = q.get()</span></span>
<span class="line"><span style="color:#D4D4D4;">    res2 = q.get()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;multithread:&quot;</span><span style="color:#D4D4D4;">, res1, res2)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;__main__&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    st = time.time()</span></span>
<span class="line"><span style="color:#D4D4D4;">    normal()</span></span>
<span class="line"><span style="color:#D4D4D4;">    et = time.time()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Time:&quot;</span><span style="color:#D4D4D4;">, et - st)</span></span>
<span class="line"><span style="color:#D4D4D4;">    st = time.time()</span></span>
<span class="line"><span style="color:#D4D4D4;">    multicore()</span></span>
<span class="line"><span style="color:#D4D4D4;">    et = time.time()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Time:&quot;</span><span style="color:#D4D4D4;">, et - st)</span></span>
<span class="line"><span style="color:#D4D4D4;">    st = time.time()</span></span>
<span class="line"><span style="color:#D4D4D4;">    multithread()</span></span>
<span class="line"><span style="color:#D4D4D4;">    et = time.time()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Time:&quot;</span><span style="color:#D4D4D4;">, et - st)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="5-pool-进程池" tabindex="-1"><a class="header-anchor" href="#5-pool-进程池" aria-hidden="true">#</a> 5. <code>Pool</code> 进程池</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> multiprocessing </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> mp</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">job</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> x**x</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">multicore</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    pool = mp.Pool(</span><span style="color:#9CDCFE;">processes</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    res = pool.map(job, </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(res))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;__main__&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    multicore()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>apply_async()</code> 函数一次使用一个值</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">res = pool.apply_async(job, (</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,))</span></span>
<span class="line"><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(res.get())</span></span>
<span class="line"><span style="color:#D4D4D4;">pool = mp.Pool(</span><span style="color:#9CDCFE;">processes</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="6-共享内存" tabindex="-1"><a class="header-anchor" href="#6-共享内存" aria-hidden="true">#</a> 6. 共享内存</h2><p>定义共享内存变量：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">val = mp.Value(</span><span style="color:#CE9178;">&#39;d&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">array = mp.Array(</span><span style="color:#CE9178;">&#39;i&#39;</span><span style="color:#D4D4D4;">, [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">])</span></span>
<span class="line"></span></code></pre></div>`,18),u={href:"https://docs.python.org/zh-cn/3/library/array.html#module-array",target:"_blank",rel:"noopener noreferrer"},C=o(`<h2 id="7-lock-锁" tabindex="-1"><a class="header-anchor" href="#7-lock-锁" aria-hidden="true">#</a> 7. <code>Lock</code> 锁</h2><p>使用锁：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> multiprocessing </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> mp</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> time</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> multiprocessing.synchronize </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Lock</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">job</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">v</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">num</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">lock</span><span style="color:#D4D4D4;">: Lock):</span></span>
<span class="line"><span style="color:#D4D4D4;">    lock.acquire()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> _ </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        time.sleep(</span><span style="color:#B5CEA8;">0.1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        v.value += num</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(v.value)</span></span>
<span class="line"><span style="color:#D4D4D4;">    lock.release()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">multicore</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    lock = mp.Lock()</span></span>
<span class="line"><span style="color:#D4D4D4;">    val = mp.Value(</span><span style="color:#CE9178;">&quot;i&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1 = mp.Process(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(val, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, lock))</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2 = mp.Process(</span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">=job, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(val, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, lock))</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2.start()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p1.join()</span></span>
<span class="line"><span style="color:#D4D4D4;">    p2.join()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;__main__&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    multicore()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function m(b,E){const l=e("router-link"),c=e("ExternalLinkIcon");return i(),r("div",null,[d,s("nav",y,[s("ul",null,[s("li",null,[a(l,{to:"#1-进程"},{default:p(()=>[n("1. 进程")]),_:1})]),s("li",null,[a(l,{to:"#2-创建进程"},{default:p(()=>[n("2. 创建进程")]),_:1})]),s("li",null,[a(l,{to:"#3-使用-queue-进行进程间通信"},{default:p(()=>[n("3. 使用 Queue 进行进程间通信")]),_:1})]),s("li",null,[a(l,{to:"#4-多线程与多进程对比"},{default:p(()=>[n("4. 多线程与多进程对比")]),_:1})]),s("li",null,[a(l,{to:"#5-pool-进程池"},{default:p(()=>[n("5. Pool 进程池")]),_:1})]),s("li",null,[a(l,{to:"#6-共享内存"},{default:p(()=>[n("6. 共享内存")]),_:1})]),s("li",null,[a(l,{to:"#7-lock-锁"},{default:p(()=>[n("7. Lock 锁")]),_:1})])])]),v,s("p",null,[n("变量的类型值可以参考"),s("a",u,[n("标准库文档"),a(c)]),n("。")]),C])}const A=D(t,[["render",m],["__file","multiprocess.html.vue"]]);export{A as default};

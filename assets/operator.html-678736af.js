import{_ as r,r as o,o as i,c as p,b as t,a as l,w as s,d as e,e as d}from"./app-e398544c.js";const y={},D=t("h1",{id:"operator-标准运算符代替",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#operator-标准运算符代替","aria-hidden":"true"},"#"),e(" operator - 标准运算符代替")],-1),u={class:"table-of-contents"},g=t("h2",{id:"_1-标准运算符代替",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-标准运算符代替","aria-hidden":"true"},"#"),e(" 1. 标准运算符代替")],-1),f=t("thead",null,[t("tr",null,[t("th",null,"项目"),t("th",null,"信息")])],-1),_=t("td",null,"源代码",-1),h={href:"https://github.com/python/cpython/tree/3.11/Lib/operator.py",target:"_blank",rel:"noopener noreferrer"},x=t("tr",null,[t("td",null,"Python 版本"),t("td",null,"全版本")],-1),b=t("tr",null,[t("td",null,"标签"),t("td",null,"函数式编程")],-1),C=d('<p>标准库 <code>operator</code> 中包含一系列函数，用于在一些场景下代替标准运算符操作。</p><div class="hint-container info"><p class="hint-container-title">魔术方法</p><p>许多方法都有对应的魔术方法。因此，许多函数也提供了后向兼容的双下划线版本，在下表中带有星号的方法都有其双下划线版本。如果函数名已经有下划线结尾，那么结尾还是双下划线，此下划线只是为了和关键字区分。</p><p>不建议双下划线版本以确保表述清晰。</p></div><p>例如下面是一些对应的双下划线版本：</p><table><thead><tr><th style="text-align:center;">标准方法</th><th style="text-align:center;">双下划线版本</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.lt(a, b)</code></td><td style="text-align:center;"><code>operator.__lt__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.le(a, b)</code></td><td style="text-align:center;"><code>operator.__le__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.eq(a, b)</code></td><td style="text-align:center;"><code>operator.__eq__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.ne(a, b)</code></td><td style="text-align:center;"><code>operator.__ne__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.ge(a, b)</code></td><td style="text-align:center;"><code>operator.__ge__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.gt(a, b)</code></td><td style="text-align:center;"><code>operator.__gt__(a, b)</code></td></tr></tbody></table><h3 id="_1-1-比较运算符" tabindex="-1"><a class="header-anchor" href="#_1-1-比较运算符" aria-hidden="true">#</a> 1.1 比较运算符</h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">小于</td><td style="text-align:left;"><code>a &lt; b</code></td><td style="text-align:left;"><code>lt(a, b)</code> *</td></tr><tr><td style="text-align:left;">小于等于</td><td style="text-align:left;"><code>a &lt;= b</code></td><td style="text-align:left;"><code>le(a, b)</code> *</td></tr><tr><td style="text-align:left;">等于</td><td style="text-align:left;"><code>a == b</code></td><td style="text-align:left;"><code>eq(a, b)</code> *</td></tr><tr><td style="text-align:left;">不等于</td><td style="text-align:left;"><code>a != b</code></td><td style="text-align:left;"><code>ne(a, b)</code> *</td></tr><tr><td style="text-align:left;">大于等于</td><td style="text-align:left;"><code>a &gt;= b</code></td><td style="text-align:left;"><code>ge(a, b)</code> *</td></tr><tr><td style="text-align:left;">大于</td><td style="text-align:left;"><code>a &gt; b</code></td><td style="text-align:left;"><code>gt(a, b)</code> *</td></tr></tbody></table><h3 id="_1-2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-逻辑运算符" aria-hidden="true">#</a> 1.2 逻辑运算符</h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">逻辑否定</td><td style="text-align:left;"><code>not a</code></td><td style="text-align:left;"><code>not_(a)</code> *</td></tr><tr><td style="text-align:left;">真值测试</td><td style="text-align:left;"><code>obj</code></td><td style="text-align:left;"><code>truth(obj)</code></td></tr><tr><td style="text-align:left;">标识</td><td style="text-align:left;"><code>a is b</code></td><td style="text-align:left;"><code>is_(a, b)</code></td></tr><tr><td style="text-align:left;">标识</td><td style="text-align:left;"><code>a is not b</code></td><td style="text-align:left;"><code>is_not(a, b)</code></td></tr></tbody></table><h3 id="_1-3-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-3-算术运算符" aria-hidden="true">#</a> 1.3 算术运算符</h3>',9),m=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"运算"),t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),v=t("tr",null,[t("td",{style:{"text-align":"left"}},"绝对值"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"abs(a)"),e(" *")])],-1),j=t("tr",null,[t("td",{style:{"text-align":"left"}},"转换为整数"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"index(a)"),e(" *")])],-1),E=t("tr",null,[t("td",{style:{"text-align":"left"}},"正数"),t("td",{style:{"text-align":"left"}},[t("code",null,"+ a")]),t("td",{style:{"text-align":"left"}},[t("code",null,"pos(a)"),e(" *")])],-1),A=t("tr",null,[t("td",{style:{"text-align":"left"}},"算术取反"),t("td",{style:{"text-align":"left"}},[t("code",null,"- a")]),t("td",{style:{"text-align":"left"}},[t("code",null,"neg(a)"),e(" *")])],-1),k=t("tr",null,[t("td",{style:{"text-align":"left"}},"加法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a + b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"add(a, b)"),e(" *")])],-1),q=t("tr",null,[t("td",{style:{"text-align":"left"}},"减法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a - b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"sub(a, b)"),e(" *")])],-1),B=t("tr",null,[t("td",{style:{"text-align":"left"}},"乘法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a * b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"mul(a, b)"),e(" *")])],-1),F=t("tr",null,[t("td",{style:{"text-align":"left"}},"除法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a / b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"truediv(a, b)"),e(" *")])],-1),w=t("tr",null,[t("td",{style:{"text-align":"left"}},"整除"),t("td",{style:{"text-align":"left"}},[t("code",null,"a // b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"floordiv(a, b)"),e(" *")])],-1),L=t("tr",null,[t("td",{style:{"text-align":"left"}},"取幂"),t("td",{style:{"text-align":"left"}},[t("code",null,"a ** b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"pow(a, b)"),e(" *")])],-1),N=t("tr",null,[t("td",{style:{"text-align":"left"}},"取模"),t("td",{style:{"text-align":"left"}},[t("code",null,"a % b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"mod(a, b)"),e(" *")])],-1),V={style:{"text-align":"left"}},I=t("td",{style:{"text-align":"left"}},[t("code",null,"a @ b")],-1),O=t("td",{style:{"text-align":"left"}},[t("code",null,"matmul(a, b)"),e(" *")],-1),T=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位与"),t("td",{style:{"text-align":"left"}},[t("code",null,"a & b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"and_(a, b)"),e(" *")])],-1),P=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位异或"),t("td",{style:{"text-align":"left"}},[t("code",null,"a ^ b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"xor(a, b)"),e(" *")])],-1),S=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位取反"),t("td",{style:{"text-align":"left"}},[t("code",null,"~ a")]),t("td",{style:{"text-align":"left"}},[t("code",null,"inv(a)"),e(" *、"),t("code",null,"invert(a)"),e(" *")])],-1),z=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位或"),t("td",{style:{"text-align":"left"}},[t("code",null,"a | b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"or_(a, b)"),e(" *")])],-1),G=t("tr",null,[t("td",{style:{"text-align":"left"}},"右移"),t("td",{style:{"text-align":"left"}},[t("code",null,"a >> b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"rshift(a, b)"),e(" *")])],-1),H=t("tr",null,[t("td",{style:{"text-align":"left"}},"左移"),t("td",{style:{"text-align":"left"}},[t("code",null,"a << b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"lshift(a, b)"),e(" *")])],-1),J=t("h3",{id:"_1-4-序列操作",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-4-序列操作","aria-hidden":"true"},"#"),e(" 1.4 序列操作")],-1),K=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"运算"),t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),M=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"b"),e(" 在 "),t("code",null,"a"),e(" 中出现的次数")]),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"countOf(a, b)")])],-1),Q=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"b"),e(" 在 "),t("code",null,"a"),e(" 中首次出现的索引")]),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"indexOf(a, b)")])],-1),R={style:{"text-align":"left"}},U=t("td",{style:{"text-align":"left"}},null,-1),W=t("td",{style:{"text-align":"left"}},[t("code",null,"length_hint(obj, default=0)")],-1),X=t("tr",null,[t("td",{style:{"text-align":"left"}},"序列拼接"),t("td",{style:{"text-align":"left"}},[t("code",null,"seq1 + seq2")]),t("td",{style:{"text-align":"left"}},[t("code",null,"concat(seq1, seq2)"),e(" *")])],-1),Y=t("tr",null,[t("td",{style:{"text-align":"left"}},"包含测试"),t("td",{style:{"text-align":"left"}},[t("code",null,"obj in seq")]),t("td",{style:{"text-align":"left"}},[t("code",null,"contains(seq, obj)"),e(" *")])],-1),Z=t("tr",null,[t("td",{style:{"text-align":"left"}},"索引赋值"),t("td",{style:{"text-align":"left"}},[t("code",null,"obj[k] = v")]),t("td",{style:{"text-align":"left"}},[t("code",null,"setitem(obj, k, v)"),e(" *")])],-1),$=t("tr",null,[t("td",{style:{"text-align":"left"}},"索引取值"),t("td",{style:{"text-align":"left"}},[t("code",null,"obj[k]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"getitem(obj, k)"),e(" *")])],-1),tt=t("tr",null,[t("td",{style:{"text-align":"left"}},"索引删除"),t("td",{style:{"text-align":"left"}},[t("code",null,"del obj[k]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"delitem(obj, k)"),e(" *")])],-1),et=t("tr",null,[t("td",{style:{"text-align":"left"}},"切片赋值"),t("td",{style:{"text-align":"left"}},[t("code",null,"seq[i:j] = values")]),t("td",{style:{"text-align":"left"}},[t("code",null,"setitem(seq, slice(i, j), values)"),e(" *")])],-1),lt=t("tr",null,[t("td",{style:{"text-align":"left"}},"切片取值"),t("td",{style:{"text-align":"left"}},[t("code",null,"seq[i:j]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"getitem(seq, slice(i, j))"),e(" *")])],-1),st=t("tr",null,[t("td",{style:{"text-align":"left"}},"切片删除"),t("td",{style:{"text-align":"left"}},[t("code",null,"del seq[i:j]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"delitem(seq, slice(i, j))"),e(" *")])],-1),nt=t("tr",null,[t("td",{style:{"text-align":"left"}},"字符串格式化"),t("td",{style:{"text-align":"left"}},[t("code",null,"s % obj")]),t("td",{style:{"text-align":"left"}},[t("code",null,"mod(s, obj)"),e(" *")])],-1),at=t("h3",{id:"_1-5-原地运算符",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-5-原地运算符","aria-hidden":"true"},"#"),e(" 1.5 原地运算符")],-1),ot=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),dt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a += b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"iadd(a, b)"),e(" *")])],-1),ct=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a &= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"iand(a, b)"),e(" *")])],-1),rt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a += b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"iconcat(a, b)"),e(" *（其中 "),t("code",null,"a"),e("、"),t("code",null,"b"),e(" 为序列）")])],-1),it=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a //= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ifloordiv(a, b)"),e(" *")])],-1),pt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a <<= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ilshift(a, b)"),e(" *")])],-1),yt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a %= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"imod(a, b)"),e(" *")])],-1),Dt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a *= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"imul(a, b)"),e(" *")])],-1),ut={style:{"text-align":"left"}},gt=t("code",null,"a @= b",-1),ft=t("td",{style:{"text-align":"left"}},[t("code",null,"imatmul(a, b)"),e(" *")],-1),_t=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a |= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ior(a, b)"),e(" *")])],-1),ht=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a **= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ipow(a, b)"),e(" *")])],-1),xt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a >>= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"irshift(a, b)"),e(" *")])],-1),bt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a -= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"isub(a, b)"),e(" *")])],-1),Ct=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a /= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"itruediv(a, b)"),e(" *")])],-1),mt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a ^= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ixor(a, b)"),e(" *")])],-1),vt=t("h3",{id:"_1-6-可调用对象",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-6-可调用对象","aria-hidden":"true"},"#"),e(" 1.6 可调用对象")],-1),jt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"运算"),t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),Et={style:{"text-align":"left"}},At=t("td",{style:{"text-align":"left"}},[t("code",null,"obj(*args, **kwargs)")],-1),kt=t("td",{style:{"text-align":"left"}},[t("code",null,"operator.call(obj, /, *args, **kwargs)"),e(" *")],-1),qt=d(`<h2 id="_2-函数式编程工具" tabindex="-1"><a class="header-anchor" href="#_2-函数式编程工具" aria-hidden="true">#</a> 2. 函数式编程工具</h2><p><code>operator</code> 模块还定义了一些用于常规属性和条目查找的工具。 这些工具适合用来编写快速字段提取器作为 <code>map()</code>、<code>sorted()</code>、<code>itertools.groupby()</code> 或其他需要相应函数参数的函数的参数。</p><h3 id="_2-1-属性获取器" tabindex="-1"><a class="header-anchor" href="#_2-1-属性获取器" aria-hidden="true">#</a> 2.1 属性获取器</h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.attrgetter(attr)</code></td></tr><tr><td style="text-align:center;"><code>operator.attrgetter(*attrs)</code></td></tr></tbody></table><p>返回一个可从操作数中获取 <code>attr</code> 的可调用对象。如果请求了一个以上的属性，则返回一个属性元组。属性名称还可包含点号。例如：</p><ul><li>在 <code>f = attrgetter(&#39;name&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name</code></li><li>在 <code>f = attrgetter(&#39;name&#39;, &#39;date&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>(b.name, b.date)</code></li><li>在 <code>f = attrgetter(&#39;name.first&#39;, &#39;name.last&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>(b.name.first, b.name.last)</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">attrgetter</span><span style="color:#D4D4D4;">(*</span><span style="color:#9CDCFE;">items</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">any</span><span style="color:#D4D4D4;">(</span><span style="color:#C586C0;">not</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">isinstance</span><span style="color:#D4D4D4;">(item, </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> item </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> items):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">raise</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">TypeError</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;attribute name must be a string&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(items) == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        attr = items[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">g</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> resolve_attr(obj, attr)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">g</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">tuple</span><span style="color:#D4D4D4;">(resolve_attr(obj, attr) </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> attr </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> items)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">resolve_attr</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">attr</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> name </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> attr.split(</span><span style="color:#CE9178;">&quot;.&quot;</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        obj = </span><span style="color:#DCDCAA;">getattr</span><span style="color:#D4D4D4;">(obj, name)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> obj</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_2-2-成员获取器" tabindex="-1"><a class="header-anchor" href="#_2-2-成员获取器" aria-hidden="true">#</a> 2.2 成员获取器</h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.itemgetter(item)</code></td></tr><tr><td style="text-align:center;"><code>operator.itemgetter(*items)</code></td></tr></tbody></table><p>返回一个使用操作数的 <code>__getitem__()</code> 方法从操作数中获取 <code>item</code> 的可调用对象。如果指定了多个条目，则返回一个查找值的元组。例如：</p><ul><li>在 <code>f = itemgetter(2)</code> 之后，调用 <code>f(r)</code> 将返回 <code>r[2]</code></li><li>在 <code>g = itemgetter(2, 5, 3)</code> 之后，调用 <code>g(r)</code> 将返回 <code>(r[2], r[5], r[3])</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">itemgetter</span><span style="color:#D4D4D4;">(*</span><span style="color:#9CDCFE;">items</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">len</span><span style="color:#D4D4D4;">(items) == </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        item = items[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">g</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> obj[item]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">g</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">tuple</span><span style="color:#D4D4D4;">(obj[item] </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> item </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> items)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> g</span></span>
<span class="line"></span></code></pre></div></details><h3 id="_2-3-方法调用器" tabindex="-1"><a class="header-anchor" href="#_2-3-方法调用器" aria-hidden="true">#</a> 2.3 方法调用器</h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.methodcaller(name, /, *args, **kwargs)</code></td></tr></tbody></table><p>返回一个在操作数上调用 <code>name</code> 方法的可调用对象。如果给出额外的参数和/或关键字参数，它们也将被传给该方法。例如：</p><ul><li>在 <code>f = methodcaller(&#39;name&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name()</code></li><li>在 <code>f = methodcaller(&#39;name&#39;, &#39;foo&#39;, bar=1)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name(&#39;foo&#39;, bar=1)</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">methodcaller</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">, /, *</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">, **</span><span style="color:#9CDCFE;">kwargs</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">caller</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">getattr</span><span style="color:#D4D4D4;">(obj, name)(*args, **kwargs)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> caller</span></span>
<span class="line"></span></code></pre></div></details>`,17);function Bt(Ft,wt){const n=o("router-link"),c=o("ExternalLinkIcon"),a=o("Badge");return i(),p("div",null,[D,t("nav",u,[t("ul",null,[t("li",null,[l(n,{to:"#_1-标准运算符代替"},{default:s(()=>[e("1. 标准运算符代替")]),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#_1-1-比较运算符"},{default:s(()=>[e("1.1 比较运算符")]),_:1})]),t("li",null,[l(n,{to:"#_1-2-逻辑运算符"},{default:s(()=>[e("1.2 逻辑运算符")]),_:1})]),t("li",null,[l(n,{to:"#_1-3-算术运算符"},{default:s(()=>[e("1.3 算术运算符")]),_:1})]),t("li",null,[l(n,{to:"#_1-4-序列操作"},{default:s(()=>[e("1.4 序列操作")]),_:1})]),t("li",null,[l(n,{to:"#_1-5-原地运算符"},{default:s(()=>[e("1.5 原地运算符")]),_:1})]),t("li",null,[l(n,{to:"#_1-6-可调用对象"},{default:s(()=>[e("1.6 可调用对象")]),_:1})])])]),t("li",null,[l(n,{to:"#_2-函数式编程工具"},{default:s(()=>[e("2. 函数式编程工具")]),_:1}),t("ul",null,[t("li",null,[l(n,{to:"#_2-1-属性获取器"},{default:s(()=>[e("2.1 属性获取器")]),_:1})]),t("li",null,[l(n,{to:"#_2-2-成员获取器"},{default:s(()=>[e("2.2 成员获取器")]),_:1})]),t("li",null,[l(n,{to:"#_2-3-方法调用器"},{default:s(()=>[e("2.3 方法调用器")]),_:1})])])])])]),g,t("table",null,[f,t("tbody",null,[t("tr",null,[_,t("td",null,[t("a",h,[e("Lib/operator.py"),l(c)])])]),x,b])]),C,t("table",null,[m,t("tbody",null,[v,j,E,A,k,q,B,F,w,L,N,t("tr",null,[t("td",V,[e("矩阵乘法 "),l(a,{type:"tip"},{default:s(()=>[e("3.5+")]),_:1})]),I,O]),T,P,S,z,G,H])]),J,t("table",null,[K,t("tbody",null,[M,Q,t("tr",null,[t("td",R,[e("对象的估计长度 "),l(a,{type:"tip"},{default:s(()=>[e("3.4+")]),_:1})]),U,W]),X,Y,Z,$,tt,et,lt,st,nt])]),at,t("table",null,[ot,t("tbody",null,[dt,ct,rt,it,pt,yt,Dt,t("tr",null,[t("td",ut,[gt,e(),l(a,{type:"tip"},{default:s(()=>[e("3.5+")]),_:1})]),ft]),_t,ht,xt,bt,Ct,mt])]),vt,t("table",null,[jt,t("tbody",null,[t("tr",null,[t("td",Et,[e("调用对象 "),l(a,{type:"tip"},{default:s(()=>[e("3.11+")]),_:1})]),At,kt])])]),qt])}const Nt=r(y,[["render",Bt],["__file","operator.html.vue"]]);export{Nt as default};

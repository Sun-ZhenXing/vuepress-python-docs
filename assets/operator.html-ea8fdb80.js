import{_ as i,M as o,p as r,q as p,R as t,N as n,V as l,t as e,a1 as d}from"./framework-a0a2d26f.js";const u={},y=t("h1",{id:"operator-标准运算符代替",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#operator-标准运算符代替","aria-hidden":"true"},"#"),e(" operator - 标准运算符代替")],-1),f={class:"table-of-contents"},g=t("h2",{id:"_1-标准运算符代替",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-标准运算符代替","aria-hidden":"true"},"#"),e(" 1. 标准运算符代替")],-1),_=t("thead",null,[t("tr",null,[t("th",null,"项目"),t("th",null,"信息")])],-1),h=t("td",null,"源代码",-1),b={href:"https://github.com/python/cpython/tree/3.11/Lib/operator.py",target:"_blank",rel:"noopener noreferrer"},x=t("tr",null,[t("td",null,"Python 版本"),t("td",null,"全版本")],-1),k=t("tr",null,[t("td",null,"标签"),t("td",null,"函数式编程")],-1),m=d('<p>标准库 <code>operator</code> 中包含一系列函数，用于在一些场景下代替标准运算符操作。</p><div class="hint-container info"><p class="hint-container-title">魔术方法</p><p>许多方法都有对应的魔术方法。因此，许多函数也提供了后向兼容的双下划线版本，在下表中带有星号的方法都有其双下划线版本。如果函数名已经有下划线结尾，那么结尾还是双下划线，此下划线只是为了和关键字区分。</p><p>不建议双下划线版本以确保表述清晰。</p></div><p>例如下面是一些对应的双下划线版本：</p><table><thead><tr><th style="text-align:center;">标准方法</th><th style="text-align:center;">双下划线版本</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.lt(a, b)</code></td><td style="text-align:center;"><code>operator.__lt__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.le(a, b)</code></td><td style="text-align:center;"><code>operator.__le__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.eq(a, b)</code></td><td style="text-align:center;"><code>operator.__eq__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.ne(a, b)</code></td><td style="text-align:center;"><code>operator.__ne__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.ge(a, b)</code></td><td style="text-align:center;"><code>operator.__ge__(a, b)</code></td></tr><tr><td style="text-align:center;"><code>operator.gt(a, b)</code></td><td style="text-align:center;"><code>operator.__gt__(a, b)</code></td></tr></tbody></table><h3 id="_1-1-比较运算符" tabindex="-1"><a class="header-anchor" href="#_1-1-比较运算符" aria-hidden="true">#</a> 1.1 比较运算符</h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">小于</td><td style="text-align:left;"><code>a &lt; b</code></td><td style="text-align:left;"><code>lt(a, b)</code> *</td></tr><tr><td style="text-align:left;">小于等于</td><td style="text-align:left;"><code>a &lt;= b</code></td><td style="text-align:left;"><code>le(a, b)</code> *</td></tr><tr><td style="text-align:left;">等于</td><td style="text-align:left;"><code>a == b</code></td><td style="text-align:left;"><code>eq(a, b)</code> *</td></tr><tr><td style="text-align:left;">不等于</td><td style="text-align:left;"><code>a != b</code></td><td style="text-align:left;"><code>ne(a, b)</code> *</td></tr><tr><td style="text-align:left;">大于等于</td><td style="text-align:left;"><code>a &gt;= b</code></td><td style="text-align:left;"><code>ge(a, b)</code> *</td></tr><tr><td style="text-align:left;">大于</td><td style="text-align:left;"><code>a &gt; b</code></td><td style="text-align:left;"><code>gt(a, b)</code> *</td></tr></tbody></table><h3 id="_1-2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-逻辑运算符" aria-hidden="true">#</a> 1.2 逻辑运算符</h3><table><thead><tr><th style="text-align:left;">运算</th><th style="text-align:left;">语法</th><th style="text-align:left;">函数</th></tr></thead><tbody><tr><td style="text-align:left;">逻辑否定</td><td style="text-align:left;"><code>not a</code></td><td style="text-align:left;"><code>not_(a)</code> *</td></tr><tr><td style="text-align:left;">真值测试</td><td style="text-align:left;"><code>obj</code></td><td style="text-align:left;"><code>truth(obj)</code></td></tr><tr><td style="text-align:left;">标识</td><td style="text-align:left;"><code>a is b</code></td><td style="text-align:left;"><code>is_(a, b)</code></td></tr><tr><td style="text-align:left;">标识</td><td style="text-align:left;"><code>a is not b</code></td><td style="text-align:left;"><code>is_not(a, b)</code></td></tr></tbody></table><h3 id="_1-3-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-3-算术运算符" aria-hidden="true">#</a> 1.3 算术运算符</h3>',9),v=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"运算"),t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),w=t("tr",null,[t("td",{style:{"text-align":"left"}},"绝对值"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"abs(a)"),e(" *")])],-1),j=t("tr",null,[t("td",{style:{"text-align":"left"}},"转换为整数"),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"index(a)"),e(" *")])],-1),q=t("tr",null,[t("td",{style:{"text-align":"left"}},"正数"),t("td",{style:{"text-align":"left"}},[t("code",null,"+ a")]),t("td",{style:{"text-align":"left"}},[t("code",null,"pos(a)"),e(" *")])],-1),B=t("tr",null,[t("td",{style:{"text-align":"left"}},"算术取反"),t("td",{style:{"text-align":"left"}},[t("code",null,"- a")]),t("td",{style:{"text-align":"left"}},[t("code",null,"neg(a)"),e(" *")])],-1),N=t("tr",null,[t("td",{style:{"text-align":"left"}},"加法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a + b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"add(a, b)"),e(" *")])],-1),V=t("tr",null,[t("td",{style:{"text-align":"left"}},"减法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a - b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"sub(a, b)"),e(" *")])],-1),E=t("tr",null,[t("td",{style:{"text-align":"left"}},"乘法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a * b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"mul(a, b)"),e(" *")])],-1),L=t("tr",null,[t("td",{style:{"text-align":"left"}},"除法"),t("td",{style:{"text-align":"left"}},[t("code",null,"a / b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"truediv(a, b)"),e(" *")])],-1),C=t("tr",null,[t("td",{style:{"text-align":"left"}},"整除"),t("td",{style:{"text-align":"left"}},[t("code",null,"a // b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"floordiv(a, b)"),e(" *")])],-1),I=t("tr",null,[t("td",{style:{"text-align":"left"}},"取幂"),t("td",{style:{"text-align":"left"}},[t("code",null,"a ** b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"pow(a, b)"),e(" *")])],-1),O=t("tr",null,[t("td",{style:{"text-align":"left"}},"取模"),t("td",{style:{"text-align":"left"}},[t("code",null,"a % b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"mod(a, b)"),e(" *")])],-1),T={style:{"text-align":"left"}},M=t("td",{style:{"text-align":"left"}},[t("code",null,"a @ b")],-1),P=t("td",{style:{"text-align":"left"}},[t("code",null,"matmul(a, b)"),e(" *")],-1),R=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位与"),t("td",{style:{"text-align":"left"}},[t("code",null,"a & b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"and_(a, b)"),e(" *")])],-1),S=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位异或"),t("td",{style:{"text-align":"left"}},[t("code",null,"a ^ b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"xor(a, b)"),e(" *")])],-1),z=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位取反"),t("td",{style:{"text-align":"left"}},[t("code",null,"~ a")]),t("td",{style:{"text-align":"left"}},[t("code",null,"inv(a)"),e(" *、"),t("code",null,"invert(a)"),e(" *")])],-1),A=t("tr",null,[t("td",{style:{"text-align":"left"}},"按位或"),t("td",{style:{"text-align":"left"}},[t("code",null,"a | b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"or_(a, b)"),e(" *")])],-1),D=t("tr",null,[t("td",{style:{"text-align":"left"}},"右移"),t("td",{style:{"text-align":"left"}},[t("code",null,"a >> b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"rshift(a, b)"),e(" *")])],-1),F=t("tr",null,[t("td",{style:{"text-align":"left"}},"左移"),t("td",{style:{"text-align":"left"}},[t("code",null,"a << b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"lshift(a, b)"),e(" *")])],-1),G=t("h3",{id:"_1-4-序列操作",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-4-序列操作","aria-hidden":"true"},"#"),e(" 1.4 序列操作")],-1),H=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"运算"),t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),J=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"b"),e(" 在 "),t("code",null,"a"),e(" 中出现的次数")]),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"countOf(a, b)")])],-1),K=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"b"),e(" 在 "),t("code",null,"a"),e(" 中首次出现的索引")]),t("td",{style:{"text-align":"left"}}),t("td",{style:{"text-align":"left"}},[t("code",null,"indexOf(a, b)")])],-1),Q={style:{"text-align":"left"}},U=t("td",{style:{"text-align":"left"}},null,-1),W=t("td",{style:{"text-align":"left"}},[t("code",null,"length_hint(obj, default=0)")],-1),X=t("tr",null,[t("td",{style:{"text-align":"left"}},"序列拼接"),t("td",{style:{"text-align":"left"}},[t("code",null,"seq1 + seq2")]),t("td",{style:{"text-align":"left"}},[t("code",null,"concat(seq1, seq2)"),e(" *")])],-1),Y=t("tr",null,[t("td",{style:{"text-align":"left"}},"包含测试"),t("td",{style:{"text-align":"left"}},[t("code",null,"obj in seq")]),t("td",{style:{"text-align":"left"}},[t("code",null,"contains(seq, obj)"),e(" *")])],-1),Z=t("tr",null,[t("td",{style:{"text-align":"left"}},"索引赋值"),t("td",{style:{"text-align":"left"}},[t("code",null,"obj[k] = v")]),t("td",{style:{"text-align":"left"}},[t("code",null,"setitem(obj, k, v)"),e(" *")])],-1),$=t("tr",null,[t("td",{style:{"text-align":"left"}},"索引取值"),t("td",{style:{"text-align":"left"}},[t("code",null,"obj[k]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"getitem(obj, k)"),e(" *")])],-1),tt=t("tr",null,[t("td",{style:{"text-align":"left"}},"索引删除"),t("td",{style:{"text-align":"left"}},[t("code",null,"del obj[k]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"delitem(obj, k)"),e(" *")])],-1),et=t("tr",null,[t("td",{style:{"text-align":"left"}},"切片赋值"),t("td",{style:{"text-align":"left"}},[t("code",null,"seq[i:j] = values")]),t("td",{style:{"text-align":"left"}},[t("code",null,"setitem(seq, slice(i, j), values)"),e(" *")])],-1),nt=t("tr",null,[t("td",{style:{"text-align":"left"}},"切片取值"),t("td",{style:{"text-align":"left"}},[t("code",null,"seq[i:j]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"getitem(seq, slice(i, j))"),e(" *")])],-1),lt=t("tr",null,[t("td",{style:{"text-align":"left"}},"切片删除"),t("td",{style:{"text-align":"left"}},[t("code",null,"del seq[i:j]")]),t("td",{style:{"text-align":"left"}},[t("code",null,"delitem(seq, slice(i, j))"),e(" *")])],-1),at=t("tr",null,[t("td",{style:{"text-align":"left"}},"字符串格式化"),t("td",{style:{"text-align":"left"}},[t("code",null,"s % obj")]),t("td",{style:{"text-align":"left"}},[t("code",null,"mod(s, obj)"),e(" *")])],-1),st=t("h3",{id:"_1-5-原地运算符",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-5-原地运算符","aria-hidden":"true"},"#"),e(" 1.5 原地运算符")],-1),ot=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),dt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a += b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"iadd(a, b)"),e(" *")])],-1),ct=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a &= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"iand(a, b)"),e(" *")])],-1),it=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a += b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"iconcat(a, b)"),e(" *（其中 "),t("code",null,"a"),e("、"),t("code",null,"b"),e(" 为序列）")])],-1),rt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a //= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ifloordiv(a, b)"),e(" *")])],-1),pt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a <<= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ilshift(a, b)"),e(" *")])],-1),ut=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a %= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"imod(a, b)"),e(" *")])],-1),yt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a *= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"imul(a, b)"),e(" *")])],-1),ft={style:{"text-align":"left"}},gt=t("code",null,"a @= b",-1),_t=t("td",{style:{"text-align":"left"}},[t("code",null,"imatmul(a, b)"),e(" *")],-1),ht=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a |= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ior(a, b)"),e(" *")])],-1),bt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a **= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ipow(a, b)"),e(" *")])],-1),xt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a >>= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"irshift(a, b)"),e(" *")])],-1),kt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a -= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"isub(a, b)"),e(" *")])],-1),mt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a /= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"itruediv(a, b)"),e(" *")])],-1),vt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"a ^= b")]),t("td",{style:{"text-align":"left"}},[t("code",null,"ixor(a, b)"),e(" *")])],-1),wt=t("h3",{id:"_1-6-可调用对象",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-6-可调用对象","aria-hidden":"true"},"#"),e(" 1.6 可调用对象")],-1),jt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"运算"),t("th",{style:{"text-align":"left"}},"语法"),t("th",{style:{"text-align":"left"}},"函数")])],-1),qt={style:{"text-align":"left"}},Bt=t("td",{style:{"text-align":"left"}},[t("code",null,"obj(*args, **kwargs)")],-1),Nt=t("td",{style:{"text-align":"left"}},[t("code",null,"operator.call(obj, /, *args, **kwargs)"),e(" *")],-1),Vt=d(`<h2 id="_2-函数式编程工具" tabindex="-1"><a class="header-anchor" href="#_2-函数式编程工具" aria-hidden="true">#</a> 2. 函数式编程工具</h2><p><code>operator</code> 模块还定义了一些用于常规属性和条目查找的工具。 这些工具适合用来编写快速字段提取器作为 <code>map()</code>、<code>sorted()</code>、<code>itertools.groupby()</code> 或其他需要相应函数参数的函数的参数。</p><h3 id="_2-1-属性获取器" tabindex="-1"><a class="header-anchor" href="#_2-1-属性获取器" aria-hidden="true">#</a> 2.1 属性获取器</h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.attrgetter(attr)</code></td></tr><tr><td style="text-align:center;"><code>operator.attrgetter(*attrs)</code></td></tr></tbody></table><p>返回一个可从操作数中获取 <code>attr</code> 的可调用对象。如果请求了一个以上的属性，则返回一个属性元组。属性名称还可包含点号。例如：</p><ul><li>在 <code>f = attrgetter(&#39;name&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name</code></li><li>在 <code>f = attrgetter(&#39;name&#39;, &#39;date&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>(b.name, b.date)</code></li><li>在 <code>f = attrgetter(&#39;name.first&#39;, &#39;name.last&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>(b.name.first, b.name.last)</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">attrgetter</span><span class="token punctuation">(</span><span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">&#39;attribute name must be a string&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        attr <span class="token operator">=</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> resolve_attr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>resolve_attr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span> <span class="token keyword">for</span> attr <span class="token keyword">in</span> items<span class="token punctuation">)</span>
    <span class="token keyword">return</span> g

<span class="token keyword">def</span> <span class="token function">resolve_attr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> attr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        obj <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> obj
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_2-2-成员获取器" tabindex="-1"><a class="header-anchor" href="#_2-2-成员获取器" aria-hidden="true">#</a> 2.2 成员获取器</h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.itemgetter(item)</code></td></tr><tr><td style="text-align:center;"><code>operator.itemgetter(*items)</code></td></tr></tbody></table><p>返回一个使用操作数的 <code>__getitem__()</code> 方法从操作数中获取 <code>item</code> 的可调用对象。如果指定了多个条目，则返回一个查找值的元组。例如：</p><ul><li>在 <code>f = itemgetter(2)</code> 之后，调用 <code>f(r)</code> 将返回 <code>r[2]</code></li><li>在 <code>g = itemgetter(2, 5, 3)</code> 之后，调用 <code>g(r)</code> 将返回 <code>(r[2], r[5], r[3])</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">itemgetter</span><span class="token punctuation">(</span><span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">)</span>
    <span class="token keyword">return</span> g
</code></pre></div></details><h3 id="_2-3-方法调用器" tabindex="-1"><a class="header-anchor" href="#_2-3-方法调用器" aria-hidden="true">#</a> 2.3 方法调用器</h3><table><thead><tr><th style="text-align:center;">语法</th></tr></thead><tbody><tr><td style="text-align:center;"><code>operator.methodcaller(name, /, *args, **kwargs)</code></td></tr></tbody></table><p>返回一个在操作数上调用 <code>name</code> 方法的可调用对象。如果给出额外的参数和/或关键字参数，它们也将被传给该方法。例如：</p><ul><li>在 <code>f = methodcaller(&#39;name&#39;)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name()</code></li><li>在 <code>f = methodcaller(&#39;name&#39;, &#39;foo&#39;, bar=1)</code> 之后，调用 <code>f(b)</code> 将返回 <code>b.name(&#39;foo&#39;, bar=1)</code></li></ul><details class="hint-container details"><summary>等价实现</summary><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">methodcaller</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">caller</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> caller
</code></pre></div></details>`,17);function Et(Lt,Ct){const a=o("router-link"),c=o("ExternalLinkIcon"),s=o("Badge");return r(),p("div",null,[y,t("nav",f,[t("ul",null,[t("li",null,[n(a,{to:"#_1-标准运算符代替"},{default:l(()=>[e("1. 标准运算符代替")]),_:1}),t("ul",null,[t("li",null,[n(a,{to:"#_1-1-比较运算符"},{default:l(()=>[e("1.1 比较运算符")]),_:1})]),t("li",null,[n(a,{to:"#_1-2-逻辑运算符"},{default:l(()=>[e("1.2 逻辑运算符")]),_:1})]),t("li",null,[n(a,{to:"#_1-3-算术运算符"},{default:l(()=>[e("1.3 算术运算符")]),_:1})]),t("li",null,[n(a,{to:"#_1-4-序列操作"},{default:l(()=>[e("1.4 序列操作")]),_:1})]),t("li",null,[n(a,{to:"#_1-5-原地运算符"},{default:l(()=>[e("1.5 原地运算符")]),_:1})]),t("li",null,[n(a,{to:"#_1-6-可调用对象"},{default:l(()=>[e("1.6 可调用对象")]),_:1})])])]),t("li",null,[n(a,{to:"#_2-函数式编程工具"},{default:l(()=>[e("2. 函数式编程工具")]),_:1}),t("ul",null,[t("li",null,[n(a,{to:"#_2-1-属性获取器"},{default:l(()=>[e("2.1 属性获取器")]),_:1})]),t("li",null,[n(a,{to:"#_2-2-成员获取器"},{default:l(()=>[e("2.2 成员获取器")]),_:1})]),t("li",null,[n(a,{to:"#_2-3-方法调用器"},{default:l(()=>[e("2.3 方法调用器")]),_:1})])])])])]),g,t("table",null,[_,t("tbody",null,[t("tr",null,[h,t("td",null,[t("a",b,[e("Lib/operator.py"),n(c)])])]),x,k])]),m,t("table",null,[v,t("tbody",null,[w,j,q,B,N,V,E,L,C,I,O,t("tr",null,[t("td",T,[e("矩阵乘法 "),n(s,{type:"tip"},{default:l(()=>[e("3.5+")]),_:1})]),M,P]),R,S,z,A,D,F])]),G,t("table",null,[H,t("tbody",null,[J,K,t("tr",null,[t("td",Q,[e("对象的估计长度 "),n(s,{type:"tip"},{default:l(()=>[e("3.4+")]),_:1})]),U,W]),X,Y,Z,$,tt,et,nt,lt,at])]),st,t("table",null,[ot,t("tbody",null,[dt,ct,it,rt,pt,ut,yt,t("tr",null,[t("td",ft,[gt,e(),n(s,{type:"tip"},{default:l(()=>[e("3.5+")]),_:1})]),_t]),ht,bt,xt,kt,mt,vt])]),wt,t("table",null,[jt,t("tbody",null,[t("tr",null,[t("td",qt,[e("调用对象 "),n(s,{type:"tip"},{default:l(()=>[e("3.11+")]),_:1})]),Bt,Nt])])]),Vt])}const Ot=i(u,[["render",Et],["__file","operator.html.vue"]]);export{Ot as default};

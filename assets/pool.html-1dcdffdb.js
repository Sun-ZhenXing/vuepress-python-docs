import{_ as o,r as p,o as r,c,b as s,a as l,w as e,d as n,e as t}from"./app-8cddb567.js";const i={},D=s("h1",{id:"池化异步执行任务",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#池化异步执行任务","aria-hidden":"true"},"#"),n(" 池化异步执行任务")],-1),y={class:"table-of-contents"},d=t(`<h2 id="_1-异步线程池" tabindex="-1"><a class="header-anchor" href="#_1-异步线程池" aria-hidden="true">#</a> 1. 异步线程池</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> asyncio</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> time</span></span>
<span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> concurrent.futures </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> ThreadPoolExecutor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">async</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">main</span><span style="color:#D4D4D4;">():</span></span>
<span class="line"><span style="color:#D4D4D4;">    start = time.perf_counter()</span></span>
<span class="line"><span style="color:#D4D4D4;">    loop = asyncio.get_event_loop()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> ThreadPoolExecutor(</span><span style="color:#9CDCFE;">max_workers</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> executor:</span></span>
<span class="line"><span style="color:#D4D4D4;">        tasks_list = [loop.run_in_executor(executor, time.sleep, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> _ </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">range</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">)]</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">await</span><span style="color:#D4D4D4;"> asyncio.gather(*tasks_list)</span></span>
<span class="line"><span style="color:#D4D4D4;">        end = time.perf_counter()</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;Time elapsed: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">end - start</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">asyncio.run(main())</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-异步进程池" tabindex="-1"><a class="header-anchor" href="#_2-异步进程池" aria-hidden="true">#</a> 2. 异步进程池</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> multiprocessing </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> Pool</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">say_hello</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) -&gt; </span><span style="color:#4EC9B0;">str</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    time.sleep(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;hello, </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">name</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">__name__</span><span style="color:#D4D4D4;"> == </span><span style="color:#CE9178;">&quot;__main__&quot;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">    time_start = time.perf_counter()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">with</span><span style="color:#D4D4D4;"> Pool() </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> pool:</span></span>
<span class="line"><span style="color:#D4D4D4;">        hi1_async = pool.apply_async(say_hello, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(</span><span style="color:#CE9178;">&quot;satori&quot;</span><span style="color:#D4D4D4;">,))</span></span>
<span class="line"><span style="color:#D4D4D4;">        hi2_async = pool.apply_async(say_hello, </span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">=(</span><span style="color:#CE9178;">&quot;koishi&quot;</span><span style="color:#D4D4D4;">,))</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(hi1_async.get())</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(hi2_async.get())</span></span>
<span class="line"><span style="color:#D4D4D4;">    time_end = time.perf_counter()</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&quot;Time elapsed: </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">time_end - time_start</span><span style="color:#569CD6;">:.2f}</span><span style="color:#CE9178;">s&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function u(C,m){const a=p("router-link");return r(),c("div",null,[D,s("nav",y,[s("ul",null,[s("li",null,[l(a,{to:"#_1-异步线程池"},{default:e(()=>[n("1. 异步线程池")]),_:1})]),s("li",null,[l(a,{to:"#_2-异步进程池"},{default:e(()=>[n("2. 异步进程池")]),_:1})])])]),d])}const _=o(i,[["render",u],["__file","pool.html.vue"]]);export{_ as default};

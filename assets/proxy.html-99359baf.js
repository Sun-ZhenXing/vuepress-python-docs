import{_ as d,M as c,p as k,q as h,R as s,N as t,V as a,t as n,a1 as r}from"./framework-a0a2d26f.js";const _={},v=s("h1",{id:"pip-使用代理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#pip-使用代理","aria-hidden":"true"},"#"),n(" pip 使用代理")],-1),b={class:"table-of-contents"},g=r(`<h2 id="方法-1-使用系统代理" tabindex="-1"><a class="header-anchor" href="#方法-1-使用系统代理" aria-hidden="true">#</a> 方法 1：使用系统代理</h2><p>不推荐使用系统代理直接安装，因为在以前的 Python 中获取代理时不能识别 HTTPS 代理，或者没有正确的证书导致 SSL 错误。</p><p>通过下面的代码查看系统代理的差异，您可能在一些爬虫任务中需要解决代理问题：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request

<span class="token keyword">def</span> <span class="token function">get_sys_proxies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    proxies <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>getproxies<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">&#39;win32&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">&#39;https&#39;</span> <span class="token keyword">in</span> proxies<span class="token punctuation">:</span>
            proxies<span class="token punctuation">[</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> proxies<span class="token punctuation">[</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;https://&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> proxies

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>getproxies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>get_sys_proxies<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),x={href:"https://pip.pypa.io/en/stable/topics/https-certificates/",target:"_blank",rel:"noopener noreferrer"},m=r('<h2 id="方法-2-指定变量" tabindex="-1"><a class="header-anchor" href="#方法-2-指定变量" aria-hidden="true">#</a> 方法 2：指定变量</h2><p>指定 <code>http_proxy</code> 和 <code>https_proxy</code> 变量。其值需要为 <code>scheme://[user:passwd@]proxy.server:port</code> 格式。</p><div class="hint-container warning"><p class="hint-container-title">SOCKS 协议</p><p>需要注意的是，SOCKS 协议的格式 <code>socks://</code> 可能不能被识别，可以写为 <code>socks5://</code>，因为当前版本的 Python 不能识别 SOCKS 协议的版本，而普遍使用的 SOCKS 协议是版本 5。</p></div><p>示例：</p>',4),y=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"https_proxy"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'socks5://127.0.0.1:10808'"),n(`
`),s("span",{class:"token builtin class-name"},"export"),n(),s("span",{class:"token assign-left variable"},"http_proxy"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'http://127.0.0.1:10809'"),n(`
`),s("span",{class:"token comment"},"# pip3 install ..."),n(`
`)])])],-1),f=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"set"),n(),s("span",{class:"token assign-left variable"},"https_proxy"),s("span",{class:"token operator"},"="),n(`socks5://127.0.0.1:10808
`),s("span",{class:"token builtin class-name"},"set"),n(),s("span",{class:"token assign-left variable"},"http_proxy"),s("span",{class:"token operator"},"="),n(`http://127.0.0.1:10809
`),s("span",{class:"token comment"},"# pip install ..."),n(`
`)])])],-1),w=s("p",null,"如果当前系统没有 SOCKS 协议支持，可以安装其支持包：",-1),S=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip3 "),s("span",{class:"token function"},"install"),n(` pysocks
`)])])],-1),C=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip "),s("span",{class:"token function"},"install"),n(` pysocks
`)])])],-1),T=s("h2",{id:"方法-3-使用命令行参数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#方法-3-使用命令行参数","aria-hidden":"true"},"#"),n(" 方法 3：使用命令行参数")],-1),A=s("p",null,[n("使用 "),s("code",null,"pip"),n(" 时指定 "),s("code",null,"--proxy"),n(" 可指定代理，规则和方法 1 一致，需要符合 "),s("code",null,"scheme://[user:passwd@]proxy.server:port"),n(" 格式。")],-1),L=s("p",null,"例如：",-1),K=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip3 "),s("span",{class:"token function"},"install"),n(" opencv-python "),s("span",{class:"token parameter variable"},"--proxy"),n(` socks5://127.0.0.1:10808
`)])])],-1),N=s("div",{class:"language-bash","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[n("pip "),s("span",{class:"token function"},"install"),n(" opencv-python "),s("span",{class:"token parameter variable"},"--proxy"),n(` socks5://127.0.0.1:10808
`)])])],-1);function O(V,q){const l=c("router-link"),u=c("ExternalLinkIcon"),i=c("CodeTabs");return k(),h("div",null,[v,s("nav",b,[s("ul",null,[s("li",null,[t(l,{to:"#方法-1-使用系统代理"},{default:a(()=>[n("方法 1：使用系统代理")]),_:1})]),s("li",null,[t(l,{to:"#方法-2-指定变量"},{default:a(()=>[n("方法 2：指定变量")]),_:1})]),s("li",null,[t(l,{to:"#方法-3-使用命令行参数"},{default:a(()=>[n("方法 3：使用命令行参数")]),_:1})])])]),g,s("p",null,[n("如果您需要使用这种方法，请查看 "),s("a",x,[n("pip: HTTPS Certificates"),t(u)]),n(" 了解更多。")]),m,t(i,{id:"33",data:[{title:"Linux/Mac"},{title:"Windows"}],"tab-id":"sys"},{tab0:a(({title:e,value:o,isActive:p})=>[y]),tab1:a(({title:e,value:o,isActive:p})=>[f]),_:1}),w,t(i,{id:"44",data:[{title:"Linux/Mac"},{title:"Windows"}],"tab-id":"sys"},{tab0:a(({title:e,value:o,isActive:p})=>[S]),tab1:a(({title:e,value:o,isActive:p})=>[C]),_:1}),T,A,L,t(i,{id:"61",data:[{title:"Linux/Mac"},{title:"Windows"}],"tab-id":"sys"},{tab0:a(({title:e,value:o,isActive:p})=>[K]),tab1:a(({title:e,value:o,isActive:p})=>[N]),_:1})])}const P=d(_,[["render",O],["__file","proxy.html.vue"]]);export{P as default};

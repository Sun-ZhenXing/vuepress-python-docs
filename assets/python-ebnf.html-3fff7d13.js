import{_ as i,M as t,p as u,q as d,R as s,N as a,V as e,t as n,ad as k,ae as h,a1 as l}from"./framework-a0a2d26f.js";const _={},m=s("h1",{id:"python-ebnf-语言定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-ebnf-语言定义","aria-hidden":"true"},"#"),n(" Python EBNF 语言定义")],-1),f={class:"table-of-contents"},g=s("h2",{id:"_1-python-语言定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-python-语言定义","aria-hidden":"true"},"#"),n(" 1. Python 语言定义")],-1),b=s("code",null,"parso",-1),v=s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),y={href:"https://github.com/davidhalter/parso/blob/master/parso/python/grammar310.txt",target:"_blank",rel:"noopener noreferrer"},N=l(`<p>例如部分语句的定义：</p><div class="language-ebnf line-numbers-mode" data-ext="ebnf"><pre class="language-ebnf"><code><span class="token rule">compound_stmt</span>: <span class="token rule">if_stmt</span> <span class="token operator">|</span> <span class="token rule">while_stmt</span> <span class="token operator">|</span> <span class="token rule">for_stmt</span> <span class="token operator">|</span> <span class="token rule">try_stmt</span> <span class="token operator">|</span> <span class="token rule">with_stmt</span> <span class="token operator">|</span> <span class="token rule">funcdef</span> <span class="token operator">|</span> <span class="token rule">classdef</span> <span class="token operator">|</span> <span class="token rule">decorated</span> <span class="token operator">|</span> <span class="token rule">async_stmt</span>
<span class="token rule">async_stmt</span>: <span class="token string">&#39;async&#39;</span> <span class="token punctuation">(</span><span class="token rule">funcdef</span> <span class="token operator">|</span> <span class="token rule">with_stmt</span> <span class="token operator">|</span> <span class="token rule">for_stmt</span><span class="token punctuation">)</span>
<span class="token rule">if_stmt</span>: <span class="token string">&#39;if&#39;</span> <span class="token rule">namedexpr_test</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span> <span class="token punctuation">(</span><span class="token string">&#39;elif&#39;</span> <span class="token rule">namedexpr_test</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token string">&#39;else&#39;</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">]</span>
<span class="token rule">while_stmt</span>: <span class="token string">&#39;while&#39;</span> <span class="token rule">namedexpr_test</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span> <span class="token punctuation">[</span><span class="token string">&#39;else&#39;</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">]</span>
<span class="token rule">for_stmt</span>: <span class="token string">&#39;for&#39;</span> <span class="token rule">exprlist</span> <span class="token string">&#39;in&#39;</span> <span class="token rule">testlist</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span> <span class="token punctuation">[</span><span class="token string">&#39;else&#39;</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">]</span>
<span class="token rule">try_stmt</span>: <span class="token punctuation">(</span><span class="token string">&#39;try&#39;</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span>
           <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token rule">except_clause</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">)</span>+
            <span class="token punctuation">[</span><span class="token string">&#39;else&#39;</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span><span class="token string">&#39;finally&#39;</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">]</span> <span class="token operator">|</span>
           <span class="token string">&#39;finally&#39;</span> <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token rule">with_stmt</span>: <span class="token string">&#39;with&#39;</span> <span class="token rule">with_item</span> <span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span> <span class="token rule">with_item</span><span class="token punctuation">)</span><span class="token operator">*</span>  <span class="token string">&#39;:&#39;</span> <span class="token rule">suite</span>
<span class="token rule">with_item</span>: <span class="token rule">test</span> <span class="token punctuation">[</span><span class="token string">&#39;as&#39;</span> <span class="token rule">expr</span><span class="token punctuation">]</span>
# <span class="token rule">NB compile</span><span class="token punctuation">.</span><span class="token rule">c makes sure that the default except clause is last</span>
<span class="token rule">except_clause</span>: <span class="token string">&#39;except&#39;</span> <span class="token punctuation">[</span><span class="token rule">test</span> <span class="token punctuation">[</span><span class="token string">&#39;as&#39;</span> <span class="token rule">NAME</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token rule">suite</span>: <span class="token rule">simple_stmt</span> <span class="token operator">|</span> <span class="token rule">NEWLINE INDENT stmt</span>+ <span class="token rule">DEDENT</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parso</code> 的解析器通过解析 EBNF 获得对应版本的 Python 语言语法，然后通过解析 Python 代码来生成抽象语法树（AST）。</p><h2 id="_2-ebnf-语法" tabindex="-1"><a class="header-anchor" href="#_2-ebnf-语法" aria-hidden="true">#</a> 2. EBNF 语法</h2>`,4),E=l('<p><strong>巴科斯-诺尔范式</strong>（Extended Backus-Naur Form，EBNF）是一种用于描述计算机语言语法的元语言。它是 Backus-Naur Form（BNF）的扩展版本，提供了更多的元素和语法结构，以便更准确地描述一些复杂的语法规则。</p><p>EBNF 的语法规则由一系列规则组成，每个规则包含一个非终止符和一个或多个终止符或非终止符。非终止符表示语法规则的一部分，而终止符是语法规则的最基本的元素。EBNF 中的规则可以使用括号、方括号、花括号等符号来描述语法的结构。</p><p>EBNF 还支持一些元素，如 <code>|</code> 表示或，可以用于在一个语法规则中定义多个可能的选择；<code>+</code> 表示至少重复一次；<code>*</code> 表示零次或多次重复。这些元素使 EBNF 更加灵活，可以描述更复杂的语法规则。</p><p>EBNF 被广泛用于编程语言的设计和描述，它可以帮助程序员更容易地理解和实现语法规则。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>:</code></td><td>表示定义</td></tr><tr><td><code>[ ]</code></td><td>中是可选项</td></tr><tr><td><code>&#39; &#39;</code></td><td>引号里的内容表示字符</td></tr><tr><td><code>| </code></td><td>两边的是可选内容，或者的关系</td></tr><tr><td><code>*</code></td><td>表示零个或者多个</td></tr><tr><td><code>+</code></td><td>表示一个或者多个</td></tr></tbody></table><hr class="footnotes-sep">',6),x={class:"footnotes"},B={class:"footnotes-list"},F={id:"footnote1",class:"footnote-item"},w={href:"http://www.coolpython.net/informal_essay/21-04/py-ebnf.html",target:"_blank",rel:"noopener noreferrer"},P=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function V(I,L){const o=t("router-link"),c=t("RouterLink"),p=t("ExternalLinkIcon"),r=t("VPCard");return u(),d("div",null,[m,s("nav",f,[s("ul",null,[s("li",null,[a(o,{to:"#_1-python-语言定义"},{default:e(()=>[n("1. Python 语言定义")]),_:1})]),s("li",null,[a(o,{to:"#_2-ebnf-语法"},{default:e(()=>[n("2. EBNF 语法")]),_:1})])])]),g,s("p",null,[n("我们在第三方库中介绍过一个 Python 语言解析器"),a(c,{to:"/pypi-package/compiler/parso.html"},{default:e(()=>[b]),_:1}),n("，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。"),v]),s("p",null,[n("例如 "),s("a",y,[n("Python 3.10 的语言定义"),a(p)]),n(" 可以从 GitHub 仓库内找到。")]),N,a(r,k(h({title:"AI 提示",desc:"解释一下 Extended Backus Naur Form（EBNF）是什么？What is the Extended Backus Naur Form (EBNF)?",link:"https://chat.openai.com/",logo:"/chatgpt.svg",color:"rgba(226, 212, 255, 0.2)"})),null,16),E,s("section",x,[s("ol",B,[s("li",F,[s("p",null,[n("冷门话题，聊一聊 Python 的 EBNF，酷 Python，"),s("a",w,[n("http://www.coolpython.net/informal_essay/21-04/py-ebnf.html"),a(p)]),n(),P])])])])])}const R=i(_,[["render",V],["__file","python-ebnf.html.vue"]]);export{R as default};

import{_ as D,r as a,o as i,c as y,b as s,a as o,w as t,d as n,n as d,g as u,e as p}from"./app-d1290edd.js";const C={},h=s("h1",{id:"python-ebnf-语言定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-ebnf-语言定义","aria-hidden":"true"},"#"),n(" Python EBNF 语言定义")],-1),_={class:"table-of-contents"},m=s("h2",{id:"_1-python-语言定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-python-语言定义","aria-hidden":"true"},"#"),n(" 1. Python 语言定义")],-1),E=s("code",null,"parso",-1),f=s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote1"},"[1]"),s("a",{class:"footnote-anchor",id:"footnote-ref1"})],-1),b={href:"https://github.com/davidhalter/parso/blob/master/parso/python/grammar310.txt",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>例如部分语句的定义：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">compound_stmt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt</span></span>
<span class="line"><span style="color:#569CD6;">async_stmt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;async&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">(funcdef | with_stmt | for_stmt)</span></span>
<span class="line"><span style="color:#569CD6;">if_stmt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;if&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">namedexpr_test &#39;:&#39; suite (&#39;elif&#39; namedexpr_test &#39;:&#39; suite)* [&#39;else&#39; &#39;:&#39; suite]</span></span>
<span class="line"><span style="color:#569CD6;">while_stmt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;while&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">namedexpr_test &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]</span></span>
<span class="line"><span style="color:#569CD6;">for_stmt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;for&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">exprlist &#39;in&#39; testlist &#39;:&#39; suite [&#39;else&#39; &#39;:&#39; suite]</span></span>
<span class="line"><span style="color:#569CD6;">try_stmt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">(&#39;try&#39; &#39;:&#39; suite</span></span>
<span class="line"><span style="color:#D4D4D4;">           </span><span style="color:#CE9178;">((except_clause &#39;:&#39; suite)+</span></span>
<span class="line"><span style="color:#D4D4D4;">            [</span><span style="color:#CE9178;">&#39;else&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;:&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">suite</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">            [</span><span style="color:#CE9178;">&#39;finally&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;:&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">suite</span><span style="color:#D4D4D4;">] </span><span style="color:#C586C0;">|</span></span>
<span class="line"><span style="color:#CE9178;">           &#39;finally&#39; &#39;:&#39; suite))</span></span>
<span class="line"><span style="color:#569CD6;">with_stmt</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;with&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">with_item (&#39;,&#39; with_item)*  &#39;:&#39; suite</span></span>
<span class="line"><span style="color:#569CD6;">with_item</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">test [&#39;as&#39; expr]</span></span>
<span class="line"><span style="color:#6A9955;"># NB compile.c makes sure that the default except clause is last</span></span>
<span class="line"><span style="color:#569CD6;">except_clause</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;except&#39;</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">test</span><span style="color:#D4D4D4;"> [</span><span style="color:#CE9178;">&#39;as&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">NAME</span><span style="color:#D4D4D4;">]]</span></span>
<span class="line"><span style="color:#569CD6;">suite</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">simple_stmt | NEWLINE INDENT stmt+ DEDENT</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parso</code> 的解析器通过解析 EBNF 获得对应版本的 Python 语言语法，然后通过解析 Python 代码来生成抽象语法树（AST）。</p><h2 id="_2-ebnf-语法" tabindex="-1"><a class="header-anchor" href="#_2-ebnf-语法" aria-hidden="true">#</a> 2. EBNF 语法</h2>`,4),A=p(`<p><strong>巴科斯-诺尔范式</strong>（Extended Backus-Naur Form，EBNF）是一种用于描述计算机语言语法的元语言。它是 Backus-Naur Form（BNF）的扩展版本，提供了更多的元素和语法结构，以便更准确地描述一些复杂的语法规则。</p><p>EBNF 的语法规则由一系列规则组成，每个规则包含一个非终止符和一个或多个终止符或非终止符。非终止符表示语法规则的一部分，而终止符是语法规则的最基本的元素。EBNF 中的规则可以使用括号、方括号、花括号等符号来描述语法的结构。</p><p>EBNF 还支持一些元素，如 <code>|</code> 表示或，可以用于在一个语法规则中定义多个可能的选择；<code>+</code> 表示至少重复一次；<code>*</code> 表示零次或多次重复。这些元素使 EBNF 更加灵活，可以描述更复杂的语法规则。</p><div class="language-bash" data-ext="sh"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">expression</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">::=</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">term</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">&quot;+&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;-&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">term}.</span></span>
<span class="line"><span style="color:#DCDCAA;">term</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">::=</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">factor</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">{</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">&quot;*&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;/&quot;</span><span style="color:#D4D4D4;">) </span><span style="color:#CE9178;">factor}.</span></span>
<span class="line"><span style="color:#DCDCAA;">factor</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">::=</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">number</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;(&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">expression</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;)&quot;.</span></span>
<span class="line"><span style="color:#DCDCAA;">number</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">::=</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">digit</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">{digit}.</span></span>
<span class="line"><span style="color:#DCDCAA;">digit</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">::=</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;0&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;1&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;2&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;3&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;4&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;5&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;6&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;7&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;8&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#DCDCAA;">&quot;9&quot;</span><span style="color:#DCDCAA;">.</span></span>
<span class="line"></span></code></pre></div><p>EBNF 被广泛用于编程语言的设计和描述，它可以帮助程序员更容易地理解和实现语法规则。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>:</code></td><td>表示定义</td></tr><tr><td><code>[ ]</code></td><td>中是可选项</td></tr><tr><td><code>&#39; &#39;</code></td><td>引号里的内容表示字符</td></tr><tr><td><code>|</code></td><td>两边的是可选内容，或者的关系</td></tr><tr><td><code>*</code></td><td>表示零个或者多个</td></tr><tr><td><code>+</code></td><td>表示一个或者多个</td></tr></tbody></table><hr class="footnotes-sep">`,7),q={class:"footnotes"},N={class:"footnotes-list"},x={id:"footnote1",class:"footnote-item"},k={href:"http://www.coolpython.net/informal_essay/21-04/py-ebnf.html",target:"_blank",rel:"noopener noreferrer"},B=s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function g(F,w){const e=a("router-link"),c=a("RouterLink"),l=a("ExternalLinkIcon"),r=a("VPCard");return i(),y("div",null,[h,s("nav",_,[s("ul",null,[s("li",null,[o(e,{to:"#_1-python-语言定义"},{default:t(()=>[n("1. Python 语言定义")]),_:1})]),s("li",null,[o(e,{to:"#_2-ebnf-语法"},{default:t(()=>[n("2. EBNF 语法")]),_:1})])])]),m,s("p",null,[n("我们在第三方库中介绍过一个 Python 语言解析器"),o(c,{to:"/pypi-package/compiler/parso.html"},{default:t(()=>[E]),_:1}),n("，它的核心就是一个 Python 语言定义，它是一个 EBNF 语法定义，用于解析 Python 代码。"),f]),s("p",null,[n("例如 "),s("a",b,[n("Python 3.10 的语言定义"),o(l)]),n(" 可以从 GitHub 仓库内找到。")]),v,o(r,d(u({title:"AI 提示",desc:"解释一下 Extended Backus Naur Form（EBNF）是什么？What is the Extended Backus Naur Form (EBNF)?",link:"https://chat.openai.com/",logo:"/vuepress-python-notes/chatgpt.svg",color:"rgba(226, 212, 255, 0.2)"})),null,16),A,s("section",q,[s("ol",N,[s("li",x,[s("p",null,[n("冷门话题，聊一聊 Python 的 EBNF，酷 Python，"),s("a",k,[n("http://www.coolpython.net/informal_essay/21-04/py-ebnf.html"),o(l)]),n(),B])])])])])}const V=D(C,[["render",g],["__file","python-ebnf.html.vue"]]);export{V as default};

import{_ as u,M as l,p as i,q as r,R as n,N as a,V as t,t as s,a1 as p}from"./framework-8980b429.js";const d={},k=n("h1",{id:"re-正则表达式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#re-正则表达式","aria-hidden":"true"},"#"),s(" re 正则表达式")],-1),h={class:"table-of-contents"},_=n("h2",{id:"_1-正则表达式模块",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-正则表达式模块","aria-hidden":"true"},"#"),s(" 1. 正则表达式模块")],-1),m=n("thead",null,[n("tr",null,[n("th",null,"项目"),n("th",null,"信息")])],-1),b=n("td",null,"源代码",-1),v={href:"https://github.com/python/cpython/tree/3.11/Lib/re/",target:"_blank",rel:"noopener noreferrer"},g=n("tr",null,[n("td",null,"Python 版本"),n("td",null,"全版本")],-1),f=n("tr",null,[n("td",null,"标签"),n("td",null,"文件和目录")],-1),y={class:"hint-container info"},x=n("p",{class:"hint-container-title"},"第三方支持",-1),I={href:"https://pypi.org/project/regex/",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"regex",-1),T=n("code",null,"re",-1),E=p('<h2 id="_2-flag-标记" tabindex="-1"><a class="header-anchor" href="#_2-flag-标记" aria-hidden="true">#</a> 2. Flag 标记</h2><h3 id="_2-1-语言相关" tabindex="-1"><a class="header-anchor" href="#_2-1-语言相关" aria-hidden="true">#</a> 2.1 语言相关</h3><p><code>re.A</code> / <code>re.ASCII</code>：让 <code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code>、<code>\\d</code>、<code>\\D</code>、<code>\\s</code>、<code>\\S</code> 只匹配 <code>ASCII</code>，而不是 <code>Unicode</code>，对应内联为 <code>(?a)</code>。</p><p><code>re.L</code> / <code>re.LOCALE</code>：由语言确定大小写敏感和 ASCII 匹配，这个标记 <strong>不推荐使用</strong>，因为语言区域机制很不可靠，它一次只能处理一个 “习惯”，而且只对 8 位字节有效，对应内联为 <code>(?L)</code>。</p><h3 id="_2-2-多行匹配" tabindex="-1"><a class="header-anchor" href="#_2-2-多行匹配" aria-hidden="true">#</a> 2.2 多行匹配</h3><p><code>re.S</code> / <code>re.DOTALL</code>：让 <code>&quot;.&quot;</code> 特殊字符匹配任何字符，包括换行符，对应内联为 <code>(?s)</code>。</p><p><code>re.M</code> / <code>re.MULTILINE</code>：多行匹配，对应内联为 <code>(?m)</code>。</p><h3 id="_2-3-其他标记" tabindex="-1"><a class="header-anchor" href="#_2-3-其他标记" aria-hidden="true">#</a> 2.3 其他标记</h3><p><code>re.I</code> / <code>re.IGNORECASE</code>：进行忽略大小写匹配，对应内联为 <code>(?i)</code>。</p><p><code>re.X</code> / <code>re.VERBOSE</code>：这个标记允许你编写更具可读性更友好的正则表达式。通过分段和添加注释。空白符号会被忽略，除非在一个字符集合当中或者由反斜杠转义，对应内联为 <code>(?x)</code>。</p><p><code>re.DEBUG</code>：显示编译时的 debug 信息。</p><h2 id="_3-标记字符" tabindex="-1"><a class="header-anchor" href="#_3-标记字符" aria-hidden="true">#</a> 3. 标记字符</h2><h3 id="_3-1-常见字符和转义字符" tabindex="-1"><a class="header-anchor" href="#_3-1-常见字符和转义字符" aria-hidden="true">#</a> 3.1 常见字符和转义字符</h3><p>你可以在大多数教程上学到常见字符，如 <code>. ^ $ [...] |</code>。</p><table><thead><tr><th>符号</th><th>含义</th><th>相反含义</th></tr></thead><tbody><tr><td><code>\\A</code></td><td>相当于 <code>^</code></td><td><code>\\Z</code></td></tr><tr><td><code>\\b</code></td><td>空字符串，但只在单词开始或结尾的位置</td><td><code>\\B</code></td></tr><tr><td><code>\\d</code></td><td>数字</td><td><code>\\D</code></td></tr><tr><td><code>\\s</code></td><td>空白字符</td><td><code>\\S</code></td></tr><tr><td><code>\\w</code></td><td>单词字符</td><td><code>\\W</code></td></tr></tbody></table><h3 id="_3-2-贪婪和非贪婪" tabindex="-1"><a class="header-anchor" href="#_3-2-贪婪和非贪婪" aria-hidden="true">#</a> 3.2 贪婪和非贪婪</h3><p>修饰符都是贪婪的，它们在字符串进行尽可能多的匹配，一个简单的方法是，加上 <code>?</code> 可以变为非贪婪的。如 <code>{m,n}?</code> 或者 <code>??</code>。</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>?</code></td><td>相当于 <code>{0,1}</code></td></tr><tr><td><code>*</code></td><td>相当于 <code>{0,}</code></td></tr><tr><td><code>+</code></td><td>相当于 <code>{1,}</code></td></tr></tbody></table><h3 id="_3-3-匹配组和集合" tabindex="-1"><a class="header-anchor" href="#_3-3-匹配组和集合" aria-hidden="true">#</a> 3.3 匹配组和集合</h3>',19),w=n("thead",null,[n("tr",null,[n("th",null,"表达式"),n("th",null,"含义")])],-1),M=n("tr",null,[n("td",null,[n("code",null,"(?P<name>...)")]),n("td",null,"命名组")],-1),P=n("tr",null,[n("td",null,[n("code",null,"()")]),n("td",null,"捕获组")],-1),S=n("tr",null,[n("td",null,[n("code",null,"(?:...)")]),n("td",null,"非捕获合")],-1),D=n("tr",null,[n("td",null,[n("code",null,"(?<tags>)")]),n("td",null,[s("内联，"),n("code",null,"<tags>"),s(" 可以是 "),n("code",null,"aiLmsux"),s(" 中的一个或多个")])],-1),A=n("code",null,"(?aiLmsux-imsx:...)",-1),L=n("td",null,"去除标记",-1),B=n("tr",null,[n("td",null,[n("code",null,"(?P=name)")]),n("td",null,"引用一个组合")],-1),F=n("tr",null,[n("td",null,[n("code",null,"(?#…)")]),n("td",null,"注释")],-1),O=n("h2",{id:"_4-断言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-断言","aria-hidden":"true"},"#"),s(" 4. 断言")],-1),R=n("strong",null,"零宽断言",-1),U=p('<h3 id="_4-1-前视后视断言" tabindex="-1"><a class="header-anchor" href="#_4-1-前视后视断言" aria-hidden="true">#</a> 4.1 前视后视断言</h3><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>(?=...)</code></td><td>前视断言</td></tr><tr><td><code>(?!...)</code></td><td>前视取反</td></tr><tr><td><code>(?&lt;=...)</code></td><td>后视断言</td></tr><tr><td><code>(?&lt;!...)</code></td><td>后视取反</td></tr></tbody></table><h3 id="_4-2-条件断言" tabindex="-1"><a class="header-anchor" href="#_4-2-条件断言" aria-hidden="true">#</a> 4.2 条件断言</h3><p><code>(?(id/name)yes-pattern|no-pattern)</code> 存在为第一个表达式，否则选择第二个匹配。</p><h2 id="_5-模块内容参考" tabindex="-1"><a class="header-anchor" href="#_5-模块内容参考" aria-hidden="true">#</a> 5. 模块内容参考</h2><h3 id="_5-1-函数" tabindex="-1"><a class="header-anchor" href="#_5-1-函数" aria-hidden="true">#</a> 5.1 函数</h3>',6),C=n("thead",null,[n("tr",null,[n("th",null,"函数"),n("th",null,"功能")])],-1),q=n("tr",null,[n("td",null,[n("code",null,"re.compile(pattern, flags=0) -> Pattern")]),n("td",null,"编译正则表达式")],-1),G=n("tr",null,[n("td",null,[n("code",null,"re.search(pattern, string, flags=0) -> Match/None")]),n("td",null,[s("扫描整个 "),n("code",null,"string"),s(" 找到匹配样式的第一个位置，并返回一个相应的匹配对象")])],-1),H=n("tr",null,[n("td",null,[n("code",null,"re.match(pattern, string, flags=0) -> Match/None")]),n("td",null,[s("如果 "),n("code",null,"string"),s(" 开始的零个或者多个字符匹配到了正则表达式样式，就返回一个相应的匹配对象")])],-1),V=n("code",null,"re.fullmatch(pattern, string, flags=0) -> Match/None",-1),W=n("td",null,[s("如果整个 "),n("code",null,"string"),s(" 匹配到正则表达式样式，就返回一个相应的匹配对象")],-1),z=n("tr",null,[n("td",null,[n("code",null,"re.split(pattern, string, maxsplit=0, flags=0) -> list[str]")]),n("td",null,[s("用 "),n("code",null,"pattern"),s(" 分开 "),n("code",null,"string"),s("。如果在 "),n("code",null,"pattern"),s(" 中捕获到括号，那么所有的组里的文字也会包含在列表里")])],-1),Z=n("tr",null,[n("td",null,[n("code",null,"re.findall(pattern, string, flags=0) -> list[tuple/str]")]),n("td",null,"如果正则表达式中没有组，则返回列表内是字符串，否则是元组")],-1),j=n("tr",null,[n("td",null,[n("code",null,"re.finditer(pattern, string, flags=0) -> iterator")]),n("td",null,[n("code",null,"pattern"),s(" 在 "),n("code",null,"string"),s(" 里所有的非重复匹配，返回为一个迭代器 "),n("code",null,"iterator"),s(" 保存了匹配对象")])],-1),K=n("tr",null,[n("td",null,[n("code",null,"re.sub(pattern, repl, string, count=0, flags=0) -> str")]),n("td",null,"替换非重叠匹配的字符串")],-1),X=n("tr",null,[n("td",null,[n("code",null,"re.subn(pattern, repl, string, count=0, flags=0) -> tuple[str, int]")]),n("td",null,[s("行为与 "),n("code",null,"sub()"),s(" 相同，但是返回一个元组 "),n("code",null,"(str, num)"),s(" 分别是字符串和替换次数")])],-1),$=n("tr",null,[n("td",null,[n("code",null,"re.escape(pattern) -> str")]),n("td",null,[s("转义 "),n("code",null,"pattern"),s(" 中的特殊字符")])],-1),J=n("tr",null,[n("td",null,[n("code",null,"re.purge()")]),n("td",null,"清除正则表达式的缓存")],-1),Q=n("tr",null,[n("td",null,[n("code",null,"Exception re.error(msg, pattern=None, pos=None)")]),n("td",null,"正则表达式错误类")],-1),Y=n("p",null,[s("注：注意即便是 "),n("code",null,"MULTILINE"),s(" 模式，"),n("code",null,"re.match()"),s(" 也只匹配字符串的开始位置，而不匹配每行开始。")],-1),nn=n("h3",{id:"_5-2-pattern-对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-2-pattern-对象","aria-hidden":"true"},"#"),s(" 5.2 Pattern 对象")],-1),sn=n("p",null,[s("下列方法基本与上面的函数用法一致，只不过多了一些 "),n("code",null,"pos"),s(" 等位置参数。")],-1),an=n("thead",null,[n("tr",null,[n("th",null,"方法")])],-1),tn=n("tr",null,[n("td",null,[n("code",null,"Pattern.search(string[, pos[, endpos]])")])],-1),en=n("tr",null,[n("td",null,[n("code",null,"Pattern.match(string[, pos[, endpos]])")])],-1),on=n("code",null,"Pattern.fullmatch(string[, pos[, endpos]])",-1),pn=n("tr",null,[n("td",null,[n("code",null,"Pattern.split(string, maxsplit=0)")])],-1),ln=n("tr",null,[n("td",null,[n("code",null,"Pattern.findall(string[, pos[, endpos]])")])],-1),cn=n("tr",null,[n("td",null,[n("code",null,"Pattern.finditer(string[, pos[, endpos]])")])],-1),un=n("tr",null,[n("td",null,[n("code",null,"Pattern.sub(repl, string, count=0)")])],-1),rn=n("tr",null,[n("td",null,[n("code",null,"Pattern.subn(repl, string, count=0)")])],-1),dn=p('<table><thead><tr><th>属性</th><th>内容</th></tr></thead><tbody><tr><td><code>Pattern.flags</code></td><td>正则匹配标记</td></tr><tr><td><code>Pattern.groups</code></td><td>捕获到的模式串中组的数量</td></tr><tr><td><code>Pattern.groupindex</code></td><td>映射由 <code>(?P&lt;id&gt;)</code> 定义的命名符号组合和数字组合的字典</td></tr><tr><td><code>Pattern.pattern</code></td><td>编译对象的原始样式字符串</td></tr></tbody></table><h3 id="_5-3-match-对象" tabindex="-1"><a class="header-anchor" href="#_5-3-match-对象" aria-hidden="true">#</a> 5.3 Match 对象</h3>',2),kn=n("thead",null,[n("tr",null,[n("th",null,"方法"),n("th",null,"内容")])],-1),hn=n("tr",null,[n("td",null,[n("code",null,"Match.expand(template)")]),n("td",null,"进行反斜杠和组的替换")],-1),_n=n("tr",null,[n("td",null,[n("code",null,"Match.group([group1, ...])")]),n("td",null,"返回匹配组")],-1),mn=n("code",null,"Match[g]",-1),bn=n("td",null,[s("等同于 "),n("code",null,"Match.group(g)")],-1),vn=n("tr",null,[n("td",null,[n("code",null,"Match.groups(default=None)")]),n("td",null,"匹配的所有组")],-1),gn=n("tr",null,[n("td",null,[n("code",null,"Match.groupdict(default=None)")]),n("td",null,"以字典的方式返回组")],-1),fn=n("tr",null,[n("td",null,[n("code",null,"Match.start([group])")]),n("td",null,"某个组的开始标号")],-1),yn=n("tr",null,[n("td",null,[n("code",null,"Match.end([group])")]),n("td",null,"某个组的结束标号")],-1),xn=n("tr",null,[n("td",null,[n("code",null,"Match.span([group])")]),n("td",null,[s("返回 "),n("code",null,"(m.start(group), m.end(group))"),s(" 如果没有返回 "),n("code",null,"(-1, -1)")])],-1),In=p(`<table><thead><tr><th>属性</th><th>内容</th></tr></thead><tbody><tr><td><code>Match.pos</code></td><td><code>pos</code></td></tr><tr><td><code>Match.endpos</code></td><td><code>endpos</code></td></tr><tr><td><code>Match.lastindex</code></td><td>最后一个组的索引</td></tr><tr><td><code>Match.lastgroup</code></td><td>最后一个组</td></tr><tr><td><code>Match.re</code></td><td><code>Pattern</code> 对象</td></tr><tr><td><code>Match.string</code></td><td>原始字符串</td></tr></tbody></table><h2 id="_6-示例-写一个词法分析器" tabindex="-1"><a class="header-anchor" href="#_6-示例-写一个词法分析器" aria-hidden="true">#</a> 6. 示例：写一个词法分析器</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> NamedTuple
<span class="token keyword">import</span> re

<span class="token keyword">class</span> <span class="token class-name">Token</span><span class="token punctuation">(</span>NamedTuple<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token builtin">str</span>
    value<span class="token punctuation">:</span> <span class="token builtin">str</span>
    line<span class="token punctuation">:</span> <span class="token builtin">int</span>
    column<span class="token punctuation">:</span> <span class="token builtin">int</span>

<span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keywords <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;IF&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;THEN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ENDIF&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FOR&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NEXT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GOSUB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;RETURN&#39;</span><span class="token punctuation">}</span>
    token_specification <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">(</span><span class="token string">&#39;NUMBER&#39;</span><span class="token punctuation">,</span>   <span class="token string">r&#39;\\d+(\\.\\d*)?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># Integer or decimal number</span>
        <span class="token punctuation">(</span><span class="token string">&#39;ASSIGN&#39;</span><span class="token punctuation">,</span>   <span class="token string">r&#39;:=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment"># Assignment operator</span>
        <span class="token punctuation">(</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">,</span>      <span class="token string">r&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment"># Statement terminator</span>
        <span class="token punctuation">(</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span>       <span class="token string">r&#39;[A-Za-z]+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># Identifiers</span>
        <span class="token punctuation">(</span><span class="token string">&#39;OP&#39;</span><span class="token punctuation">,</span>       <span class="token string">r&#39;[+\\-*/]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment"># Arithmetic operators</span>
        <span class="token punctuation">(</span><span class="token string">&#39;NEWLINE&#39;</span><span class="token punctuation">,</span>  <span class="token string">r&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment"># Line endings</span>
        <span class="token punctuation">(</span><span class="token string">&#39;SKIP&#39;</span><span class="token punctuation">,</span>     <span class="token string">r&#39;[ \\t]+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment"># Skip over spaces and tabs</span>
        <span class="token punctuation">(</span><span class="token string">&#39;MISMATCH&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment"># Any other character</span>
    <span class="token punctuation">]</span>
    tok_regex <span class="token operator">=</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">&#39;(?P&lt;%s&gt;%s)&#39;</span> <span class="token operator">%</span> pair <span class="token keyword">for</span> pair <span class="token keyword">in</span> token_specification<span class="token punctuation">)</span>
    line_num <span class="token operator">=</span> <span class="token number">1</span>
    line_start <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> mo <span class="token keyword">in</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>tok_regex<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>
        kind <span class="token operator">=</span> mo<span class="token punctuation">.</span>lastgroup
        value <span class="token operator">=</span> mo<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
        column <span class="token operator">=</span> mo<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> line_start
        <span class="token keyword">if</span> kind <span class="token operator">==</span> <span class="token string">&#39;NUMBER&#39;</span><span class="token punctuation">:</span>
            value <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">&#39;.&#39;</span> <span class="token keyword">in</span> value <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> kind <span class="token operator">==</span> <span class="token string">&#39;ID&#39;</span> <span class="token keyword">and</span> value <span class="token keyword">in</span> keywords<span class="token punctuation">:</span>
            kind <span class="token operator">=</span> value
        <span class="token keyword">elif</span> kind <span class="token operator">==</span> <span class="token string">&#39;NEWLINE&#39;</span><span class="token punctuation">:</span>
            line_start <span class="token operator">=</span> mo<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>
            line_num <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">elif</span> kind <span class="token operator">==</span> <span class="token string">&#39;SKIP&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">elif</span> kind <span class="token operator">==</span> <span class="token string">&#39;MISMATCH&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string"> unexpected on line </span><span class="token interpolation"><span class="token punctuation">{</span>line_num<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">yield</span> Token<span class="token punctuation">(</span>kind<span class="token punctuation">,</span> value<span class="token punctuation">,</span> line_num<span class="token punctuation">,</span> column<span class="token punctuation">)</span>

statements <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;
    IF quantity THEN
        total := total + price * quantity;
        tax := price * 0.05;
    ENDIF;
&#39;&#39;&#39;</span>

<span class="token keyword">for</span> token <span class="token keyword">in</span> tokenize<span class="token punctuation">(</span>statements<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该词法器产生以下的输出：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;IF&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;IF&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;quantity&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;THEN&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;THEN&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;total&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ASSIGN&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;:=&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;total&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;OP&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;OP&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;quantity&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">41</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;tax&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ASSIGN&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;:=&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;price&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;OP&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;NUMBER&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">27</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;ENDIF&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;ENDIF&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>
Token<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;END&#39;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function Nn(Tn,En){const e=l("router-link"),c=l("ExternalLinkIcon"),o=l("Badge");return i(),r("div",null,[k,n("nav",h,[n("ul",null,[n("li",null,[a(e,{to:"#_1-正则表达式模块"},{default:t(()=>[s("1. 正则表达式模块")]),_:1})]),n("li",null,[a(e,{to:"#_2-flag-标记"},{default:t(()=>[s("2. Flag 标记")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_2-1-语言相关"},{default:t(()=>[s("2.1 语言相关")]),_:1})]),n("li",null,[a(e,{to:"#_2-2-多行匹配"},{default:t(()=>[s("2.2 多行匹配")]),_:1})]),n("li",null,[a(e,{to:"#_2-3-其他标记"},{default:t(()=>[s("2.3 其他标记")]),_:1})])])]),n("li",null,[a(e,{to:"#_3-标记字符"},{default:t(()=>[s("3. 标记字符")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_3-1-常见字符和转义字符"},{default:t(()=>[s("3.1 常见字符和转义字符")]),_:1})]),n("li",null,[a(e,{to:"#_3-2-贪婪和非贪婪"},{default:t(()=>[s("3.2 贪婪和非贪婪")]),_:1})]),n("li",null,[a(e,{to:"#_3-3-匹配组和集合"},{default:t(()=>[s("3.3 匹配组和集合")]),_:1})])])]),n("li",null,[a(e,{to:"#_4-断言"},{default:t(()=>[s("4. 断言")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_4-1-前视后视断言"},{default:t(()=>[s("4.1 前视后视断言")]),_:1})]),n("li",null,[a(e,{to:"#_4-2-条件断言"},{default:t(()=>[s("4.2 条件断言")]),_:1})])])]),n("li",null,[a(e,{to:"#_5-模块内容参考"},{default:t(()=>[s("5. 模块内容参考")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_5-1-函数"},{default:t(()=>[s("5.1 函数")]),_:1})]),n("li",null,[a(e,{to:"#_5-2-pattern-对象"},{default:t(()=>[s("5.2 Pattern 对象")]),_:1})]),n("li",null,[a(e,{to:"#_5-3-match-对象"},{default:t(()=>[s("5.3 Match 对象")]),_:1})])])]),n("li",null,[a(e,{to:"#_6-示例-写一个词法分析器"},{default:t(()=>[s("6. 示例：写一个词法分析器")]),_:1})])])]),_,n("table",null,[m,n("tbody",null,[n("tr",null,[b,n("td",null,[n("a",v,[s("Lib/re/"),a(c)])])]),g,f])]),n("div",y,[x,n("p",null,[s("第三方模块 "),n("a",I,[N,a(c)]),s("，提供了与标准库 "),T,s(" 模块兼容的 API 接口，同时，还提供了更多功能和更全面的 Unicode 支持")])]),E,n("table",null,[w,n("tbody",null,[M,P,S,D,n("tr",null,[n("td",null,[A,s(),a(o,{type:"tip"},{default:t(()=>[s("3.6+")]),_:1})]),L]),B,F])]),O,n("p",null,[a(o,{type:"tip"},{default:t(()=>[s("定义")]),_:1}),s(" 所有的正则表达式都是一种断言，"),R,s("（Zero-Width Assertions）只进行查找而并不消费，占用字符串宽度为零。")]),U,n("table",null,[C,n("tbody",null,[q,G,H,n("tr",null,[n("td",null,[V,s(),a(o,{type:"tip"},{default:t(()=>[s("3.6+")]),_:1})]),W]),z,Z,j,K,X,$,J,Q])]),Y,nn,sn,n("table",null,[an,n("tbody",null,[tn,en,n("tr",null,[n("td",null,[on,s(),a(o,{type:"tip"},{default:t(()=>[s("3.6+")]),_:1})])]),pn,ln,cn,un,rn])]),dn,n("table",null,[kn,n("tbody",null,[hn,_n,n("tr",null,[n("td",null,[mn,s(),a(o,{type:"tip"},{default:t(()=>[s("3.6+")]),_:1})]),bn]),vn,gn,fn,yn,xn])]),In])}const Mn=u(d,[["render",Nn],["__file","re.html.vue"]]);export{Mn as default};

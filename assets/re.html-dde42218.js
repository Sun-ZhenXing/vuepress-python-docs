import{_ as r,r as p,o as D,c as d,b as s,a as l,w as a,d as n,e as t}from"./app-9f19ef42.js";const i={},y=s("h1",{id:"re-正则表达式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#re-正则表达式","aria-hidden":"true"},"#"),n(" re - 正则表达式")],-1),u={class:"table-of-contents"},C=s("h2",{id:"_1-正则表达式模块",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-正则表达式模块","aria-hidden":"true"},"#"),n(" 1. 正则表达式模块")],-1),h=s("thead",null,[s("tr",null,[s("th",null,"项目"),s("th",null,"信息")])],-1),E=s("td",null,"源代码",-1),_={href:"https://github.com/python/cpython/tree/3.11/Lib/re/",target:"_blank",rel:"noopener noreferrer"},v=s("tr",null,[s("td",null,"Python 版本"),s("td",null,"全版本")],-1),m=s("tr",null,[s("td",null,"标签"),s("td",null,"文件和目录")],-1),b={class:"hint-container info"},f=s("p",{class:"hint-container-title"},"第三方支持",-1),F={href:"https://pypi.org/project/regex/",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"regex",-1),A=s("code",null,"re",-1),B=t('<h2 id="_2-flag-标记" tabindex="-1"><a class="header-anchor" href="#_2-flag-标记" aria-hidden="true">#</a> 2. Flag 标记</h2><h3 id="_2-1-语言相关" tabindex="-1"><a class="header-anchor" href="#_2-1-语言相关" aria-hidden="true">#</a> 2.1 语言相关</h3><p><code>re.A</code> / <code>re.ASCII</code>：让 <code>\\w</code>、<code>\\W</code>、<code>\\b</code>、<code>\\B</code>、<code>\\d</code>、<code>\\D</code>、<code>\\s</code>、<code>\\S</code> 只匹配 <code>ASCII</code>，而不是 <code>Unicode</code>，对应内联为 <code>(?a)</code>。</p><p><code>re.L</code> / <code>re.LOCALE</code>：由语言确定大小写敏感和 ASCII 匹配，这个标记 <strong>不推荐使用</strong>，因为语言区域机制很不可靠，它一次只能处理一个 “习惯”，而且只对 8 位字节有效，对应内联为 <code>(?L)</code>。</p><h3 id="_2-2-多行匹配" tabindex="-1"><a class="header-anchor" href="#_2-2-多行匹配" aria-hidden="true">#</a> 2.2 多行匹配</h3><p><code>re.S</code> / <code>re.DOTALL</code>：让 <code>&quot;.&quot;</code> 特殊字符匹配任何字符，包括换行符，对应内联为 <code>(?s)</code>。</p><p><code>re.M</code> / <code>re.MULTILINE</code>：多行匹配，对应内联为 <code>(?m)</code>。</p><h3 id="_2-3-其他标记" tabindex="-1"><a class="header-anchor" href="#_2-3-其他标记" aria-hidden="true">#</a> 2.3 其他标记</h3><p><code>re.I</code> / <code>re.IGNORECASE</code>：进行忽略大小写匹配，对应内联为 <code>(?i)</code>。</p><p><code>re.X</code> / <code>re.VERBOSE</code>：这个标记允许你编写更具可读性更友好的正则表达式。通过分段和添加注释。空白符号会被忽略，除非在一个字符集合当中或者由反斜杠转义，对应内联为 <code>(?x)</code>。</p><p><code>re.DEBUG</code>：显示编译时的 debug 信息。</p><h2 id="_3-标记字符" tabindex="-1"><a class="header-anchor" href="#_3-标记字符" aria-hidden="true">#</a> 3. 标记字符</h2><h3 id="_3-1-常见字符和转义字符" tabindex="-1"><a class="header-anchor" href="#_3-1-常见字符和转义字符" aria-hidden="true">#</a> 3.1 常见字符和转义字符</h3><p>你可以在大多数教程上学到常见字符，如 <code>. ^ $ [...] |</code>。</p><table><thead><tr><th>符号</th><th>含义</th><th>相反含义</th></tr></thead><tbody><tr><td><code>\\A</code></td><td>相当于 <code>^</code></td><td><code>\\Z</code></td></tr><tr><td><code>\\b</code></td><td>空字符串，但只在单词开始或结尾的位置</td><td><code>\\B</code></td></tr><tr><td><code>\\d</code></td><td>数字</td><td><code>\\D</code></td></tr><tr><td><code>\\s</code></td><td>空白字符</td><td><code>\\S</code></td></tr><tr><td><code>\\w</code></td><td>单词字符</td><td><code>\\W</code></td></tr></tbody></table><h3 id="_3-2-贪婪和非贪婪" tabindex="-1"><a class="header-anchor" href="#_3-2-贪婪和非贪婪" aria-hidden="true">#</a> 3.2 贪婪和非贪婪</h3><p>修饰符都是贪婪的，它们在字符串进行尽可能多的匹配，一个简单的方法是，加上 <code>?</code> 可以变为非贪婪的。如 <code>{m,n}?</code> 或者 <code>??</code>。</p><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>?</code></td><td>相当于 <code>{0,1}</code></td></tr><tr><td><code>*</code></td><td>相当于 <code>{0,}</code></td></tr><tr><td><code>+</code></td><td>相当于 <code>{1,}</code></td></tr></tbody></table><h3 id="_3-3-匹配组和集合" tabindex="-1"><a class="header-anchor" href="#_3-3-匹配组和集合" aria-hidden="true">#</a> 3.3 匹配组和集合</h3>',19),k=s("thead",null,[s("tr",null,[s("th",null,"表达式"),s("th",null,"含义")])],-1),x=s("tr",null,[s("td",null,[s("code",null,"(?P<name>...)")]),s("td",null,"命名组")],-1),I=s("tr",null,[s("td",null,[s("code",null,"()")]),s("td",null,"捕获组")],-1),N=s("tr",null,[s("td",null,[s("code",null,"(?:...)")]),s("td",null,"非捕获合")],-1),T=s("tr",null,[s("td",null,[s("code",null,"(?<tags>)")]),s("td",null,[n("内联，"),s("code",null,"<tags>"),n(" 可以是 "),s("code",null,"aiLmsux"),n(" 中的一个或多个")])],-1),M=s("code",null,"(?aiLmsux-imsx:...)",-1),P=s("td",null,"去除标记",-1),S=s("tr",null,[s("td",null,[s("code",null,"(?P=name)")]),s("td",null,"引用一个组合")],-1),L=s("tr",null,[s("td",null,[s("code",null,"(?#…)")]),s("td",null,"注释")],-1),O=s("h2",{id:"_4-断言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_4-断言","aria-hidden":"true"},"#"),n(" 4. 断言")],-1),U=s("strong",null,"零宽断言",-1),R=t('<h3 id="_4-1-前视后视断言" tabindex="-1"><a class="header-anchor" href="#_4-1-前视后视断言" aria-hidden="true">#</a> 4.1 前视后视断言</h3><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>(?=...)</code></td><td>前视断言</td></tr><tr><td><code>(?!...)</code></td><td>前视取反</td></tr><tr><td><code>(?&lt;=...)</code></td><td>后视断言</td></tr><tr><td><code>(?&lt;!...)</code></td><td>后视取反</td></tr></tbody></table><h3 id="_4-2-条件断言" tabindex="-1"><a class="header-anchor" href="#_4-2-条件断言" aria-hidden="true">#</a> 4.2 条件断言</h3><p><code>(?(id/name)yes-pattern|no-pattern)</code> 存在为第一个表达式，否则选择第二个匹配。</p><h2 id="_5-模块内容参考" tabindex="-1"><a class="header-anchor" href="#_5-模块内容参考" aria-hidden="true">#</a> 5. 模块内容参考</h2><h3 id="_5-1-函数" tabindex="-1"><a class="header-anchor" href="#_5-1-函数" aria-hidden="true">#</a> 5.1 函数</h3>',6),q=s("thead",null,[s("tr",null,[s("th",null,"函数"),s("th",null,"功能")])],-1),w=s("tr",null,[s("td",null,[s("code",null,"re.compile(pattern, flags=0) -> Pattern")]),s("td",null,"编译正则表达式")],-1),G=s("tr",null,[s("td",null,[s("code",null,"re.search(pattern, string, flags=0) -> Match/None")]),s("td",null,[n("扫描整个 "),s("code",null,"string"),n(" 找到匹配样式的第一个位置，并返回一个相应的匹配对象")])],-1),H=s("tr",null,[s("td",null,[s("code",null,"re.match(pattern, string, flags=0) -> Match/None")]),s("td",null,[n("如果 "),s("code",null,"string"),n(" 开始的零个或者多个字符匹配到了正则表达式样式，就返回一个相应的匹配对象")])],-1),V=s("code",null,"re.fullmatch(pattern, string, flags=0) -> Match/None",-1),W=s("td",null,[n("如果整个 "),s("code",null,"string"),n(" 匹配到正则表达式样式，就返回一个相应的匹配对象")],-1),z=s("tr",null,[s("td",null,[s("code",null,"re.split(pattern, string, maxsplit=0, flags=0) -> list[str]")]),s("td",null,[n("用 "),s("code",null,"pattern"),n(" 分开 "),s("code",null,"string"),n("。如果在 "),s("code",null,"pattern"),n(" 中捕获到括号，那么所有的组里的文字也会包含在列表里")])],-1),Z=s("tr",null,[s("td",null,[s("code",null,"re.findall(pattern, string, flags=0) -> list[tuple/str]")]),s("td",null,"如果正则表达式中没有组，则返回列表内是字符串，否则是元组")],-1),j=s("tr",null,[s("td",null,[s("code",null,"re.finditer(pattern, string, flags=0) -> iterator")]),s("td",null,[s("code",null,"pattern"),n(" 在 "),s("code",null,"string"),n(" 里所有的非重复匹配，返回为一个迭代器 "),s("code",null,"iterator"),n(" 保存了匹配对象")])],-1),K=s("tr",null,[s("td",null,[s("code",null,"re.sub(pattern, repl, string, count=0, flags=0) -> str")]),s("td",null,"替换非重叠匹配的字符串")],-1),X=s("tr",null,[s("td",null,[s("code",null,"re.subn(pattern, repl, string, count=0, flags=0) -> tuple[str, int]")]),s("td",null,[n("行为与 "),s("code",null,"sub()"),n(" 相同，但是返回一个元组 "),s("code",null,"(str, num)"),n(" 分别是字符串和替换次数")])],-1),$=s("tr",null,[s("td",null,[s("code",null,"re.escape(pattern) -> str")]),s("td",null,[n("转义 "),s("code",null,"pattern"),n(" 中的特殊字符")])],-1),J=s("tr",null,[s("td",null,[s("code",null,"re.purge()")]),s("td",null,"清除正则表达式的缓存")],-1),Q=s("tr",null,[s("td",null,[s("code",null,"Exception re.error(msg, pattern=None, pos=None)")]),s("td",null,"正则表达式错误类")],-1),Y=s("p",null,[n("注：注意即便是 "),s("code",null,"MULTILINE"),n(" 模式，"),s("code",null,"re.match()"),n(" 也只匹配字符串的开始位置，而不匹配每行开始。")],-1),ss=s("h3",{id:"_5-2-pattern-对象",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-2-pattern-对象","aria-hidden":"true"},"#"),n(" 5.2 Pattern 对象")],-1),ns=s("p",null,[n("下列方法基本与上面的函数用法一致，只不过多了一些 "),s("code",null,"pos"),n(" 等位置参数。")],-1),ls=s("thead",null,[s("tr",null,[s("th",null,"方法")])],-1),as=s("tr",null,[s("td",null,[s("code",null,"Pattern.search(string[, pos[, endpos]])")])],-1),os=s("tr",null,[s("td",null,[s("code",null,"Pattern.match(string[, pos[, endpos]])")])],-1),es=s("code",null,"Pattern.fullmatch(string[, pos[, endpos]])",-1),ts=s("tr",null,[s("td",null,[s("code",null,"Pattern.split(string, maxsplit=0)")])],-1),ps=s("tr",null,[s("td",null,[s("code",null,"Pattern.findall(string[, pos[, endpos]])")])],-1),cs=s("tr",null,[s("td",null,[s("code",null,"Pattern.finditer(string[, pos[, endpos]])")])],-1),rs=s("tr",null,[s("td",null,[s("code",null,"Pattern.sub(repl, string, count=0)")])],-1),Ds=s("tr",null,[s("td",null,[s("code",null,"Pattern.subn(repl, string, count=0)")])],-1),ds=t('<table><thead><tr><th>属性</th><th>内容</th></tr></thead><tbody><tr><td><code>Pattern.flags</code></td><td>正则匹配标记</td></tr><tr><td><code>Pattern.groups</code></td><td>捕获到的模式串中组的数量</td></tr><tr><td><code>Pattern.groupindex</code></td><td>映射由 <code>(?P&lt;id&gt;)</code> 定义的命名符号组合和数字组合的字典</td></tr><tr><td><code>Pattern.pattern</code></td><td>编译对象的原始样式字符串</td></tr></tbody></table><h3 id="_5-3-match-对象" tabindex="-1"><a class="header-anchor" href="#_5-3-match-对象" aria-hidden="true">#</a> 5.3 Match 对象</h3>',2),is=s("thead",null,[s("tr",null,[s("th",null,"方法"),s("th",null,"内容")])],-1),ys=s("tr",null,[s("td",null,[s("code",null,"Match.expand(template)")]),s("td",null,"进行反斜杠和组的替换")],-1),us=s("tr",null,[s("td",null,[s("code",null,"Match.group([group1, ...])")]),s("td",null,"返回匹配组")],-1),Cs=s("code",null,"Match[g]",-1),hs=s("td",null,[n("等同于 "),s("code",null,"Match.group(g)")],-1),Es=s("tr",null,[s("td",null,[s("code",null,"Match.groups(default=None)")]),s("td",null,"匹配的所有组")],-1),_s=s("tr",null,[s("td",null,[s("code",null,"Match.groupdict(default=None)")]),s("td",null,"以字典的方式返回组")],-1),vs=s("tr",null,[s("td",null,[s("code",null,"Match.start([group])")]),s("td",null,"某个组的开始标号")],-1),ms=s("tr",null,[s("td",null,[s("code",null,"Match.end([group])")]),s("td",null,"某个组的结束标号")],-1),bs=s("tr",null,[s("td",null,[s("code",null,"Match.span([group])")]),s("td",null,[n("返回 "),s("code",null,"(m.start(group), m.end(group))"),n(" 如果没有返回 "),s("code",null,"(-1, -1)")])],-1),fs=t(`<table><thead><tr><th>属性</th><th>内容</th></tr></thead><tbody><tr><td><code>Match.pos</code></td><td><code>pos</code></td></tr><tr><td><code>Match.endpos</code></td><td><code>endpos</code></td></tr><tr><td><code>Match.lastindex</code></td><td>最后一个组的索引</td></tr><tr><td><code>Match.lastgroup</code></td><td>最后一个组</td></tr><tr><td><code>Match.re</code></td><td><code>Pattern</code> 对象</td></tr><tr><td><code>Match.string</code></td><td>原始字符串</td></tr></tbody></table><h2 id="_6-示例-写一个词法分析器" tabindex="-1"><a class="header-anchor" href="#_6-示例-写一个词法分析器" aria-hidden="true">#</a> 6. 示例：写一个词法分析器</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> typing </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> NamedTuple</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Token</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">NamedTuple</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">type</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">str</span></span>
<span class="line"><span style="color:#D4D4D4;">    value: </span><span style="color:#4EC9B0;">str</span></span>
<span class="line"><span style="color:#D4D4D4;">    line: </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"><span style="color:#D4D4D4;">    column: </span><span style="color:#4EC9B0;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">def</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">tokenize</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">code</span><span style="color:#D4D4D4;">):</span></span>
<span class="line"><span style="color:#D4D4D4;">    keywords = {</span><span style="color:#CE9178;">&#39;IF&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;THEN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;ENDIF&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;FOR&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;NEXT&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;GOSUB&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;RETURN&#39;</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">    token_specification = [</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;NUMBER&#39;</span><span style="color:#D4D4D4;">,   </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;\\d</span><span style="color:#D7BA7D;">+</span><span style="color:#CE9178;">(</span><span style="color:#D7BA7D;">\\.</span><span style="color:#D16969;">\\d</span><span style="color:#D7BA7D;">*</span><span style="color:#CE9178;">)</span><span style="color:#D7BA7D;">?</span><span style="color:#D16969;">&#39;</span><span style="color:#D4D4D4;">),  </span><span style="color:#6A9955;"># Integer or decimal number</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;ASSIGN&#39;</span><span style="color:#D4D4D4;">,   </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;:=&#39;</span><span style="color:#D4D4D4;">),           </span><span style="color:#6A9955;"># Assignment operator</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;END&#39;</span><span style="color:#D4D4D4;">,      </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;;&#39;</span><span style="color:#D4D4D4;">),            </span><span style="color:#6A9955;"># Statement terminator</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">,       </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;</span><span style="color:#CE9178;">[</span><span style="color:#D16969;">A-Za-z</span><span style="color:#CE9178;">]</span><span style="color:#D7BA7D;">+</span><span style="color:#D16969;">&#39;</span><span style="color:#D4D4D4;">),    </span><span style="color:#6A9955;"># Identifiers</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;OP&#39;</span><span style="color:#D4D4D4;">,       </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;</span><span style="color:#CE9178;">[</span><span style="color:#D16969;">+</span><span style="color:#D7BA7D;">\\-</span><span style="color:#D16969;">*/</span><span style="color:#CE9178;">]</span><span style="color:#D16969;">&#39;</span><span style="color:#D4D4D4;">),      </span><span style="color:#6A9955;"># Arithmetic operators</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;NEWLINE&#39;</span><span style="color:#D4D4D4;">,  </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;</span><span style="color:#D7BA7D;">\\n</span><span style="color:#D16969;">&#39;</span><span style="color:#D4D4D4;">),           </span><span style="color:#6A9955;"># Line endings</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;SKIP&#39;</span><span style="color:#D4D4D4;">,     </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;</span><span style="color:#CE9178;">[</span><span style="color:#D16969;"> </span><span style="color:#D7BA7D;">\\t</span><span style="color:#CE9178;">]</span><span style="color:#D7BA7D;">+</span><span style="color:#D16969;">&#39;</span><span style="color:#D4D4D4;">),       </span><span style="color:#6A9955;"># Skip over spaces and tabs</span></span>
<span class="line"><span style="color:#D4D4D4;">        (</span><span style="color:#CE9178;">&#39;MISMATCH&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">r</span><span style="color:#D16969;">&#39;.&#39;</span><span style="color:#D4D4D4;">),            </span><span style="color:#6A9955;"># Any other character</span></span>
<span class="line"><span style="color:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;">    tok_regex = </span><span style="color:#CE9178;">&#39;|&#39;</span><span style="color:#D4D4D4;">.join(</span><span style="color:#CE9178;">&#39;(?P&lt;</span><span style="color:#569CD6;">%s</span><span style="color:#CE9178;">&gt;</span><span style="color:#569CD6;">%s</span><span style="color:#CE9178;">)&#39;</span><span style="color:#D4D4D4;"> % pair </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> pair </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> token_specification)</span></span>
<span class="line"><span style="color:#D4D4D4;">    line_num = </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">    line_start = </span><span style="color:#B5CEA8;">0</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> mo </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> re.finditer(tok_regex, code):</span></span>
<span class="line"><span style="color:#D4D4D4;">        kind = mo.lastgroup</span></span>
<span class="line"><span style="color:#D4D4D4;">        value = mo.group()</span></span>
<span class="line"><span style="color:#D4D4D4;">        column = mo.start() - line_start</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> kind == </span><span style="color:#CE9178;">&#39;NUMBER&#39;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            value = </span><span style="color:#4EC9B0;">float</span><span style="color:#D4D4D4;">(value) </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;.&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> value </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">int</span><span style="color:#D4D4D4;">(value)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">elif</span><span style="color:#D4D4D4;"> kind == </span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">and</span><span style="color:#D4D4D4;"> value </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> keywords:</span></span>
<span class="line"><span style="color:#D4D4D4;">            kind = value</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">elif</span><span style="color:#D4D4D4;"> kind == </span><span style="color:#CE9178;">&#39;NEWLINE&#39;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            line_start = mo.end()</span></span>
<span class="line"><span style="color:#D4D4D4;">            line_num += </span><span style="color:#B5CEA8;">1</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">elif</span><span style="color:#D4D4D4;"> kind == </span><span style="color:#CE9178;">&#39;SKIP&#39;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">continue</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">elif</span><span style="color:#D4D4D4;"> kind == </span><span style="color:#CE9178;">&#39;MISMATCH&#39;</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#C586C0;">raise</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">RuntimeError</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">f</span><span style="color:#CE9178;">&#39;</span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">value</span><span style="color:#569CD6;">!r}</span><span style="color:#CE9178;"> unexpected on line </span><span style="color:#569CD6;">{</span><span style="color:#D4D4D4;">line_num</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">yield</span><span style="color:#D4D4D4;"> Token(kind, value, line_num, column)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">statements = </span><span style="color:#CE9178;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#CE9178;">    IF quantity THEN</span></span>
<span class="line"><span style="color:#CE9178;">        total := total + price * quantity;</span></span>
<span class="line"><span style="color:#CE9178;">        tax := price * 0.05;</span></span>
<span class="line"><span style="color:#CE9178;">    ENDIF;</span></span>
<span class="line"><span style="color:#CE9178;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> token </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> tokenize(statements):</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">print</span><span style="color:#D4D4D4;">(token)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该词法器产生以下的输出：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;IF&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;IF&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;quantity&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;THEN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;THEN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;total&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ASSIGN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;:=&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">14</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;total&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">17</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;OP&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;+&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">23</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;price&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">25</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;OP&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;*&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">31</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;quantity&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">33</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;END&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">41</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;tax&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ASSIGN&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;:=&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">12</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ID&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;price&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;OP&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;*&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">21</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;NUMBER&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">0.05</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">23</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;END&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">27</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ENDIF&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;ENDIF&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">Token(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;END&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&#39;;&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">line</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">column</span><span style="color:#D4D4D4;">=</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function Fs(gs,As){const o=p("router-link"),c=p("ExternalLinkIcon"),e=p("Badge");return D(),d("div",null,[y,s("nav",u,[s("ul",null,[s("li",null,[l(o,{to:"#_1-正则表达式模块"},{default:a(()=>[n("1. 正则表达式模块")]),_:1})]),s("li",null,[l(o,{to:"#_2-flag-标记"},{default:a(()=>[n("2. Flag 标记")]),_:1}),s("ul",null,[s("li",null,[l(o,{to:"#_2-1-语言相关"},{default:a(()=>[n("2.1 语言相关")]),_:1})]),s("li",null,[l(o,{to:"#_2-2-多行匹配"},{default:a(()=>[n("2.2 多行匹配")]),_:1})]),s("li",null,[l(o,{to:"#_2-3-其他标记"},{default:a(()=>[n("2.3 其他标记")]),_:1})])])]),s("li",null,[l(o,{to:"#_3-标记字符"},{default:a(()=>[n("3. 标记字符")]),_:1}),s("ul",null,[s("li",null,[l(o,{to:"#_3-1-常见字符和转义字符"},{default:a(()=>[n("3.1 常见字符和转义字符")]),_:1})]),s("li",null,[l(o,{to:"#_3-2-贪婪和非贪婪"},{default:a(()=>[n("3.2 贪婪和非贪婪")]),_:1})]),s("li",null,[l(o,{to:"#_3-3-匹配组和集合"},{default:a(()=>[n("3.3 匹配组和集合")]),_:1})])])]),s("li",null,[l(o,{to:"#_4-断言"},{default:a(()=>[n("4. 断言")]),_:1}),s("ul",null,[s("li",null,[l(o,{to:"#_4-1-前视后视断言"},{default:a(()=>[n("4.1 前视后视断言")]),_:1})]),s("li",null,[l(o,{to:"#_4-2-条件断言"},{default:a(()=>[n("4.2 条件断言")]),_:1})])])]),s("li",null,[l(o,{to:"#_5-模块内容参考"},{default:a(()=>[n("5. 模块内容参考")]),_:1}),s("ul",null,[s("li",null,[l(o,{to:"#_5-1-函数"},{default:a(()=>[n("5.1 函数")]),_:1})]),s("li",null,[l(o,{to:"#_5-2-pattern-对象"},{default:a(()=>[n("5.2 Pattern 对象")]),_:1})]),s("li",null,[l(o,{to:"#_5-3-match-对象"},{default:a(()=>[n("5.3 Match 对象")]),_:1})])])]),s("li",null,[l(o,{to:"#_6-示例-写一个词法分析器"},{default:a(()=>[n("6. 示例：写一个词法分析器")]),_:1})])])]),C,s("table",null,[h,s("tbody",null,[s("tr",null,[E,s("td",null,[s("a",_,[n("Lib/re/"),l(c)])])]),v,m])]),s("div",b,[f,s("p",null,[n("第三方模块 "),s("a",F,[g,l(c)]),n("，提供了与标准库 "),A,n(" 模块兼容的 API 接口，同时，还提供了更多功能和更全面的 Unicode 支持")])]),B,s("table",null,[k,s("tbody",null,[x,I,N,T,s("tr",null,[s("td",null,[M,n(),l(e,{type:"tip"},{default:a(()=>[n("3.6+")]),_:1})]),P]),S,L])]),O,s("p",null,[l(e,{type:"tip"},{default:a(()=>[n("定义")]),_:1}),n(" 所有的正则表达式都是一种断言，"),U,n("（Zero-Width Assertions）只进行查找而并不消费，占用字符串宽度为零。")]),R,s("table",null,[q,s("tbody",null,[w,G,H,s("tr",null,[s("td",null,[V,n(),l(e,{type:"tip"},{default:a(()=>[n("3.6+")]),_:1})]),W]),z,Z,j,K,X,$,J,Q])]),Y,ss,ns,s("table",null,[ls,s("tbody",null,[as,os,s("tr",null,[s("td",null,[es,n(),l(e,{type:"tip"},{default:a(()=>[n("3.6+")]),_:1})])]),ts,ps,cs,rs,Ds])]),ds,s("table",null,[is,s("tbody",null,[ys,us,s("tr",null,[s("td",null,[Cs,n(),l(e,{type:"tip"},{default:a(()=>[n("3.6+")]),_:1})]),hs]),Es,_s,vs,ms,bs])]),fs])}const ks=r(i,[["render",Fs],["__file","re.html.vue"]]);export{ks as default};

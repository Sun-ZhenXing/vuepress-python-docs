import{_ as c,r as e,o as t,c as r,b as s,a,w as o,d as n,e as i}from"./app-72efa82c.js";const D={},y=s("h1",{id:"python-语言技巧",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-语言技巧","aria-hidden":"true"},"#"),n(" Python 语言技巧")],-1),d={class:"table-of-contents"},u=s("h2",{id:"1-列表推导",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#1-列表推导","aria-hidden":"true"},"#"),n(" 1. 列表推导")],-1),h=s("h3",{id:"11-从字典中提取子集",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#11-从字典中提取子集","aria-hidden":"true"},"#"),n(" 1.1 从字典中提取子集")],-1),C={class:"hint-container info"},v=s("p",{class:"hint-container-title"},"引用",-1),_=s("em",null,"Python Cookbook",-1),k={href:"https://python3-cookbook.readthedocs.io/zh_CN/latest/c01/p17_extract_subset_of_dict.html",target:"_blank",rel:"noopener noreferrer"},m=i(`<p>你想构造一个字典，它是另外一个字典的子集，最简单的方式是使用字典推导：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">prices = {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;ACME&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">45.23</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;AAPL&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">612.78</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;IBM&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">205.55</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;HPQ&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">37.20</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&#39;FB&#39;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">10.75</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;"># Make a dictionary of all prices over 200</span></span>
<span class="line"><span style="color:#D4D4D4;">p1 = {key: value </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> key, value </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> prices.items() </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> value &gt; </span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Make a dictionary of tech stocks</span></span>
<span class="line"><span style="color:#D4D4D4;">tech_names = {</span><span style="color:#CE9178;">&#39;AAPL&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;IBM&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;HPQ&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;MSFT&#39;</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">p2 = {key: value </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> key, value </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> prices.items() </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> key </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> tech_names}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数情况下字典推导能做到的，通过创建一个元组序列然后把它传给 <code>dict()</code> 函数也能实现：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">p1 = </span><span style="color:#4EC9B0;">dict</span><span style="color:#D4D4D4;">((key, value) </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> key, value </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> prices.items() </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> value &gt; </span><span style="color:#B5CEA8;">200</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><p>但是，字典推导方式表意更清晰，并且实际上也会运行的更快些（在这个例子中，实际测试几乎比 <code>dict()</code> 函数方式快整整一倍）</p><p>有时候完成同一件事会有多种方式。比如，第二个例子程序也可以像这样重写：</p><div class="language-python" data-ext="py"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;"># Make a dictionary of tech stocks</span></span>
<span class="line"><span style="color:#D4D4D4;">tech_names = { </span><span style="color:#CE9178;">&#39;AAPL&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;IBM&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;HPQ&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;MSFT&#39;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">p2 = { key: prices[key] </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> key </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> prices.keys() &amp; tech_names }</span></span>
<span class="line"></span></code></pre></div><p>但是，运行时间测试结果显示这种方案大概比第一种方案慢 1.6 倍。</p>`,8);function E(b,f){const l=e("router-link"),p=e("ExternalLinkIcon");return t(),r("div",null,[y,s("nav",d,[s("ul",null,[s("li",null,[a(l,{to:"#1-列表推导"},{default:o(()=>[n("1. 列表推导")]),_:1}),s("ul",null,[s("li",null,[a(l,{to:"#11-从字典中提取子集"},{default:o(()=>[n("1.1 从字典中提取子集")]),_:1})])])])])]),u,h,s("div",C,[v,s("p",null,[n("引用自 "),_,n("："),s("a",k,[n("从字典中提取子集"),a(p)]),n("。")])]),m])}const A=c(D,[["render",E],["__file","tricks.html.vue"]]);export{A as default};
